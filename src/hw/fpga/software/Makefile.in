# Copyright (C) 2021 SCARV project <info@scarv.org>
#
# Use of this source code is restricted per the MIT license, a copy of which 
# can be found at https://opensource.org/licenses/MIT (or should be included 
# as LICENSE.txt within the associated archive or repository).

#--------------------------------------------------------------------
# Build software
#--------------------------------------------------------------------

export SOC_HAL  = ${REPO_HOME}/src/hw/fpga/soc/${SOC}/hal
export SW = ${REPO_HOME}/src/sw

# include build-related content for algorithm
include ${SW}/${ALG}/Makefile.in

FPGA_DEF_CONF  = -DSPARKLE_RV32_TYPE1
FPGA_DEF_CONF += -DSPARKLE_UNROLL 
FPGA_DEF_CONF += -DDRIVER_TRIALS_WARM=10 -DDRIVER_TRIALS_REAL=50 -DDRIVER_MEASURE=1 
FPGA_DEF_CONF += -DSPARKLE_RV32_ELL 
FPGA_DEF_CONF += -DSPARKLE_REV_EXTERN -DSPARKLE_FWD_EXTERN 

FPGA_DEF_CONF  = -DPHOTON_RV32_TYPE2
FPGA_DEF_CONF += -DPHOTON_UNROLL 
FPGA_DEF_CONF += -DDRIVER_TRIALS_WARM=10 -DDRIVER_TRIALS_REAL=50 -DDRIVER_MEASURE=1 

export FPGA_SWCONF = $(FPGA_DEF_CONF)

# -----------------------------------------------------------------------------
ifeq "${IMP}" "nist"
export LWISE_INCLUDES += ${SOC_HAL} ${REPO_HOME}/build/fpga/${ALG} ${SW}/share ${SW}/share/nist ${SW}/share/arch/${ARCH} 
else
export LWISE_INCLUDES += ${SOC_HAL} ${REPO_HOME}/build/fpga/${ALG} ${SW}/share ${SW}/share/nist ${SW}/share/arch/${ARCH} ${SW}/${ALG}/arch/${ARCH} ${SW}/${ALG}/imp/${IMP} ${SW}/${ALG}/imp/share
endif

#export FPGA_INCLUDES = ${SW}/share ${SW}/share/arch/${ARCH} ${SW}/${ALG} ${SW}/${ALG}/arch/${ARCH} ${SW}/${ALG}/imp/${IMP} ${SOC_HAL}

export LWISE_SOURCES  = $(wildcard $(addsuffix /*.c,   ${LWISE_INCLUDES}))
export LWISE_SOURCES += $(wildcard $(addsuffix /*.cpp, ${LWISE_INCLUDES}))
export LWISE_SOURCES += $(wildcard $(addsuffix /*.s,   ${LWISE_INCLUDES}))
export LWISE_SOURCES += $(wildcard $(addsuffix /*.S,   ${LWISE_INCLUDES}))
export LWISE_HEADERS  = $(wildcard $(addsuffix /*.h,   ${LWISE_INCLUDES}))

export FPGA_INCLUDES := ${LWISE_INCLUDES} ${NIST_INCLUDES}
export FPGA_SOURCES  := ${LWISE_SOURCES}  ${NIST_SOURCES} ${REPO_HOME}/build/fpga/${ALG}/kat.c 
export FPGA_HEADERS  := ${LWISE_HEADERS}  ${NIST_HEADERS} ${REPO_HOME}/build/fpga/${ALG}/kat.h 

MABI       = $(findstring i,$(ARCH:rv32=i))lp$(ARCH:rv%=%)
FPGA_GCC_FLAGS  = -march=$(ARCH)imac -mabi=$(MABI)  -DPREALLOCATE=1 -mcmodel=medany
FPGA_GCC_FLAGS += -fno-builtin-printf -static -nostartfiles -T$(SOC_HAL)/lscript.ld
GCC_PREFIX = ${RISCV_ROCKET}/bin/riscv64-unknown-elf

# pass-through environment variable as macros for use in source code
ifeq "${IMP}" "nist"
FPGA_GCC_FLAGS += -DALG="\"${ALG}\"" ${FPGA_SWCONF} -DARCH="\"${ARCH}\"" -DIMP="\"${IMP}\""
else
FPGA_GCC_FLAGS += -DALG="\"${ALG}\"" ${FPGA_SWCONF} -DARCH="\"${ARCH}\"" -DIMP="\"${IMP}\"" -DLWISE
endif


FPGA_TARGET   = ${REPO_HOME}/build/fpga/${ALG}/fpga_${ARCH}_${ISE}.elf
FPGA_OUTBIN   = ${REPO_HOME}/build/fpga/${ALG}/fpga_${ARCH}_${ISE}.bin

# -----------------------------------------------------------------------------

${REPO_HOME}/build/fpga/${ALG}       :
	@mkdir --parents ${@}

${REPO_HOME}/build/fpga/${ALG}/kat.h : ${NIST_KAT} ${REPO_HOME}/build/fpga/${ALG}
	@python3 ${SW}/share/kat.py --header < ${<} > ${@}

${REPO_HOME}/build/fpga/${ALG}/kat.c : ${NIST_KAT} ${REPO_HOME}/build/fpga/${ALG}
	@python3 ${SW}/share/kat.py --source < ${<} > ${@}

${FPGA_TARGET} : ${FPGA_SOURCES} ${FPGA_HEADERS} 
	${GCC_PREFIX}-gcc ${FPGA_GCC_FLAGS} ${GCC_PATHS} $(addprefix -I ,${FPGA_INCLUDES}) -std='gnu99' -O2 -o ${@} $(filter %.c, ${^}) $(filter %.S, ${^}) ${GCC_LIBS}

$(FPGA_OUTBIN) : $(FPGA_TARGET)
	@${GCC_PREFIX}-objcopy -O binary $< $@

${FPGA_TARGET}.asm : ${FPGA_TARGET}
	@${GCC_PREFIX}-objdump --disassemble-all ${<} > ${@}

fpga-run : $(FPGA_OUTBIN) ${FPGA_TARGET}.asm 
	@$(FPGA)/script/upload.py --port $(PORT) --baud 115200 upload $(FPGA_OUTBIN) --stdout

#all   : ${TARGET}.elf ${TARGET}.asm
fpga-clean : 
	@rm --force ${FPGA_TARGET}
	@rm --force ${FPGA_TARGET}.asm
	@rm --force ${FPGA_OUTBIN}

# =============================================================================
