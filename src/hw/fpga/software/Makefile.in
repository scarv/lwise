# Copyright (C) 2021 SCARV project <info@scarv.org>
#
# Use of this source code is restricted per the MIT license, a copy of which 
# can be found at https://opensource.org/licenses/MIT (or should be included 
# as LICENSE.txt within the associated archive or repository).

#--------------------------------------------------------------------
# Build software
#--------------------------------------------------------------------
FPGA_DEF_CONF  = -DSPARKLE_RV32_TYPE4
#FPGA_DEF_CONF  = -DSPARKLE_RV64_TYPE4
FPGA_DEF_CONF += -DDRIVER_TRIALS_WARM=10 -DDRIVER_TRIALS_REAL=50 -DDRIVER_MEASURE=1 
FPGA_DEF_CONF += -DSPARKLE_RV32B -DSPARKLE_RV32_ELL 
#FPGA_DEF_CONF += -DSPARKLE_RV64B -DSPARKLE_RV64_ELL 
FPGA_DEF_CONF += -DCRAXS10_ENC_UNROLL -DTRAXL17_ENC_UNROLL -DSPARKLE_FWD_UNROLL 
FPGA_DEF_CONF += -DCRAXS10_DEC_UNROLL -DTRAXL17_DEC_UNROLL -DSPARKLE_REV_UNROLL
FPGA_DEF_CONF += -DCRAXS10_ENC_EXTERN -DTRAXL17_ENC_EXTERN -DSPARKLE_FWD_EXTERN 
FPGA_DEF_CONF += -DCRAXS10_DEC_EXTERN -DTRAXL17_DEC_EXTERN -DSPARKLE_REV_EXTERN

export FPGA_SWCONF = $(FPGA_DEF_CONF)

export SOC_HAL  = ${REPO_HOME}/src/hw/fpga/soc/${SOC}/hal
export SOFTWARE = ${REPO_HOME}/src/sw
export FPGA_INCLUDES = ${SOFTWARE}/share ${SOFTWARE}/share/arch/${ARCH} ${SOFTWARE}/${ALG} ${SOFTWARE}/${ALG}/arch/${ARCH} ${SOFTWARE}/${ALG}/imp/${IMP} ${SOC_HAL}

export FPGA_SOURCES  = $(wildcard $(addsuffix /*.c, ${FPGA_INCLUDES}))
export FPGA_SOURCES += $(wildcard $(addsuffix /*.S, ${FPGA_INCLUDES}))
export FPGA_HEADERS  = $(wildcard $(addsuffix /*.h, ${FPGA_INCLUDES}))

MABI       = $(findstring i,$(ARCH:rv32=i))lp$(ARCH:rv%=%)
FPGA_GCC_FLAGS  = -march=$(ARCH)imac -mabi=$(MABI)  -DPREALLOCATE=1 -mcmodel=medany
FPGA_GCC_FLAGS += -fno-builtin-printf -static -nostartfiles -T$(SOC_HAL)/lscript.ld
GCC_PREFIX = ${RISCV_ROCKET}/bin/riscv64-unknown-elf

FPGA_TARGET   = ${REPO_HOME}/build/fpga/fpga_${ALG}_${ARCH}_${ISE}.elf
FPGA_OUTBIN   = ${REPO_HOME}/build/fpga/fpga_${ALG}_${ARCH}_${ISE}.bin

# -----------------------------------------------------------------------------

${FPGA_TARGET} : ${FPGA_SOURCES} ${FPGA_HEADERS}
	@${GCC_PREFIX}-gcc ${FPGA_SWCONF} ${FPGA_GCC_FLAGS} ${GCC_PATHS} $(addprefix -I ,${FPGA_INCLUDES}) -std='gnu99' -O2 -o ${@} $(filter %.c, ${^}) $(filter %.S, ${^}) ${GCC_LIBS}

$(FPGA_OUTBIN) : $(FPGA_TARGET)
	@${GCC_PREFIX}-objcopy -O binary $< $@

${FPGA_TARGET}.asm : ${FPGA_TARGET}
	@${GCC_PREFIX}-objdump --disassemble-all ${<} > ${@}

fpga-run : $(FPGA_OUTBIN) ${FPGA_TARGET}.asm 
	@$(FPGA)/script/upload.py --port $(PORT) --baud 115200 upload $(FPGA_OUTBIN) --stdout

#all   : ${TARGET}.elf ${TARGET}.asm
fpga-clean : 
	@rm --force ${FPGA_TARGET}
	@rm --force ${FPGA_TARGET}.asm
	@rm --force ${FPGA_OUTBIN}

# =============================================================================
