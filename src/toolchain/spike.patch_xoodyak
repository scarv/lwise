diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 0000000..1d03f12
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,4 @@
+#include "arith.h"
+
+// ++ xoodyak
+// -- xoodyak
diff --git a/riscv/arith.h b/riscv/arith.h
index 398217e..d0d9ee9 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,21 @@
 #include <climits>
 #include <cstddef>
 
+// ++ xoodyak
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+inline uint64_t ROL64( uint64_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 64 - n ) ) );
+}
+inline uint64_t ROR64( uint64_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 64 - n ) ) );
+}
+// -- xoodyak
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 591e41d..be5f7c8 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -79,6 +79,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ xoodyak
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- xoodyak
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index 881ed7d..3473a7f 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -286,6 +286,10 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ xoodyak
+#define MATCH_XOODYAK_XORROL 0x4000702B
+#define  MASK_XOODYAK_XORROL 0xFE00707F
+// -- xoodyak
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -2426,6 +2430,9 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ xoodyak
+DECLARE_INSN(xoodyak_xorrol, MATCH_XOODYAK_XORROL, MASK_XOODYAK_XORROL)
+// -- xoodyak
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/xoodyak_xorrol.h b/riscv/insns/xoodyak_xorrol.h
new file mode 100644
index 0000000..07b726c
--- /dev/null
+++ b/riscv/insns/xoodyak_xorrol.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x = READ_REG( insn.rs1() );
+  uint32_t y = READ_REG( insn.rs2() );
+
+  uint32_t r = ROL32( x, 5 ) ^ ROL32( y, 14 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index d4422fe..6a30caa 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -918,6 +918,9 @@ riscv_insn_priv = \
 	sret \
 	wfi \
 
+# ++ xoodyak
+riscv_insn_xoodyak = xoodyak_xorrol
+# -- xoodyak
 
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
@@ -933,6 +936,7 @@ riscv_insn_list = \
 	$(if $(HAVE_INT128),$(riscv_insn_ext_v),) \
 	$(riscv_insn_ext_h) \
 	$(riscv_insn_priv) \
+	$(riscv_insn_xoodyak) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
