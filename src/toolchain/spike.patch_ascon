diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 0000000..e4f37b9
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,6 @@
+#include "arith.h"
+
+// ++ ascon
+int ROT_0[] = { 19, 61,  1, 10,  7 };
+int ROT_1[] = { 28, 39,  6, 17, 41 };
+// -- ascon
diff --git a/riscv/arith.h b/riscv/arith.h
index 398217e..2898e0b 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,24 @@
 #include <climits>
 #include <cstddef>
 
+// ++ ascon
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+inline uint64_t ROL64( uint64_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 64 - n ) ) );
+}
+inline uint64_t ROR64( uint64_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 64 - n ) ) );
+}
+
+extern int ROT_0[];
+extern int ROT_1[];
+// -- ascon
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 591e41d..723c77c 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -79,6 +79,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ ascon
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- ascon
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index 881ed7d..b0ea709 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -286,6 +286,24 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ ascon
+#define MATCH_ASCON_ORN      0x0000705B
+#define  MASK_ASCON_ORN      0xFE00707F
+#define MATCH_ASCON_ANDN     0x0200705B
+#define  MASK_ASCON_ANDN     0xFE00707F
+#define MATCH_ASCON_RORI_LO  0x0000700B
+#define  MASK_ASCON_RORI_LO  0xC000707F
+#define MATCH_ASCON_RORI_HI  0x4000700B
+#define  MASK_ASCON_RORI_HI  0xC000707F
+#define MATCH_ASCON_RORI     0x8000600B
+#define  MASK_ASCON_RORI     0xC000707F
+#define MATCH_ASCON_SIGMA_LO 0x0000702B
+#define  MASK_ASCON_SIGMA_LO 0xC000707F
+#define MATCH_ASCON_SIGMA_HI 0x4000702B
+#define  MASK_ASCON_SIGMA_HI 0xC000707F
+#define MATCH_ASCON_SIGMA    0x8000602B
+#define  MASK_ASCON_SIGMA    0xC000707F
+// -- ascon
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -2426,6 +2444,16 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ ascon
+DECLARE_INSN(ascon_orn,      MATCH_ASCON_ORN,      MASK_ASCON_ORN)
+DECLARE_INSN(ascon_andn,     MATCH_ASCON_ANDN,     MASK_ASCON_ANDN)
+DECLARE_INSN(ascon_rori_lo,  MATCH_ASCON_RORI_LO,  MASK_ASCON_RORI_LO)
+DECLARE_INSN(ascon_rori_hi,  MATCH_ASCON_RORI_HI,  MASK_ASCON_RORI_HI)
+DECLARE_INSN(ascon_rori,     MATCH_ASCON_RORI,     MASK_ASCON_RORI)
+DECLARE_INSN(ascon_sigma_lo, MATCH_ASCON_SIGMA_LO, MASK_ASCON_SIGMA_LO)
+DECLARE_INSN(ascon_sigma_hi, MATCH_ASCON_SIGMA_HI, MASK_ASCON_SIGMA_HI)
+DECLARE_INSN(ascon_sigma,    MATCH_ASCON_SIGMA,    MASK_ASCON_SIGMA)
+// -- ascon
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/ascon_andn.h b/riscv/insns/ascon_andn.h
new file mode 100644
index 0000000..70200a9
--- /dev/null
+++ b/riscv/insns/ascon_andn.h
@@ -0,0 +1,16 @@
+if     ( xlen == 32 ) {
+  uint32_t x = READ_REG( insn.rs1() );
+  uint32_t y = READ_REG( insn.rs2() );
+
+  uint32_t r = x & ~y;
+
+  WRITE_REG( insn.rd(), r );
+}
+else if( xlen == 64 ) {
+  uint64_t x = READ_REG( insn.rs1() );
+  uint64_t y = READ_REG( insn.rs2() );
+
+  uint64_t r = x & ~y;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/ascon_orn.h b/riscv/insns/ascon_orn.h
new file mode 100644
index 0000000..e24aabc
--- /dev/null
+++ b/riscv/insns/ascon_orn.h
@@ -0,0 +1,16 @@
+if     ( xlen == 32 ) {
+  uint32_t x = READ_REG( insn.rs1() );
+  uint32_t y = READ_REG( insn.rs2() );
+
+  uint32_t r = x | ~y;
+
+  WRITE_REG( insn.rd(), r );
+}
+else if( xlen == 64 ) {
+  uint64_t x = READ_REG( insn.rs1() );
+  uint64_t y = READ_REG( insn.rs2() );
+
+  uint64_t r = x | ~y;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/ascon_rori.h b/riscv/insns/ascon_rori.h
new file mode 100644
index 0000000..5e93df5
--- /dev/null
+++ b/riscv/insns/ascon_rori.h
@@ -0,0 +1,7 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+
+  uint64_t r    = ROR64( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/ascon_rori_hi.h b/riscv/insns/ascon_rori_hi.h
new file mode 100644
index 0000000..f807c5e
--- /dev/null
+++ b/riscv/insns/ascon_rori_hi.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ROR64( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), ( r >> 32 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/insns/ascon_rori_lo.h b/riscv/insns/ascon_rori_lo.h
new file mode 100644
index 0000000..1b032d2
--- /dev/null
+++ b/riscv/insns/ascon_rori_lo.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ROR64( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), ( r >>  0 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/insns/ascon_sigma.h b/riscv/insns/ascon_sigma.h
new file mode 100644
index 0000000..9f9ad87
--- /dev/null
+++ b/riscv/insns/ascon_sigma.h
@@ -0,0 +1,8 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+
+  uint64_t r    = x ^ ROR64( x, ROT_0[ insn.funct7() & 0x1F ] ) ^
+                      ROR64( x, ROT_1[ insn.funct7() & 0x1F ] ) ;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/ascon_sigma_hi.h b/riscv/insns/ascon_sigma_hi.h
new file mode 100644
index 0000000..2dd87b1
--- /dev/null
+++ b/riscv/insns/ascon_sigma_hi.h
@@ -0,0 +1,11 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = x ^ ROR64( x, ROT_0[ insn.funct7() & 0x1F ] ) ^
+                      ROR64( x, ROT_1[ insn.funct7() & 0x1F ] ) ;
+
+  WRITE_REG( insn.rd(), ( r >> 32 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/insns/ascon_sigma_lo.h b/riscv/insns/ascon_sigma_lo.h
new file mode 100644
index 0000000..1467612
--- /dev/null
+++ b/riscv/insns/ascon_sigma_lo.h
@@ -0,0 +1,11 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = x ^ ROR64( x, ROT_0[ insn.funct7() & 0x1F ] ) ^
+                      ROR64( x, ROT_1[ insn.funct7() & 0x1F ] ) ;
+
+  WRITE_REG( insn.rd(), ( r >>  0 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index d4422fe..ba63cd6 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -40,6 +40,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -918,6 +919,9 @@ riscv_insn_priv = \
 	sret \
 	wfi \
 
+# ++ ascon
+riscv_insn_ascon = ascon_andn ascon_orn ascon_rori ascon_rori_hi ascon_rori_lo ascon_sigma ascon_sigma_hi ascon_sigma_lo
+# -- ascon
 
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
@@ -933,6 +937,7 @@ riscv_insn_list = \
 	$(if $(HAVE_INT128),$(riscv_insn_ext_v),) \
 	$(riscv_insn_ext_h) \
 	$(riscv_insn_priv) \
+	$(riscv_insn_ascon) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
