diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 0000000..4d5092b
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,6 @@
+#include "arith.h"
+
+uint32_t RCON[] = { 0xB7E15162, 0xBF715880, 0x38B4DA56, 0x324E7738, 0xBB1185EB, 0x4F7C7B57, 0xCFBFA1C8, 0xC2B3293D };
+
+int ROT_X[] = { 31, 17,  0, 24 };
+int ROT_Y[] = { 24, 17, 31, 16 };
diff --git a/riscv/arith.h b/riscv/arith.h
index 398217e..d6129bc 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,30 @@
 #include <climits>
 #include <cstddef>
 
+// ++ alzette
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+inline uint64_t ROL64( uint64_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 64 - n ) ) );
+}
+inline uint64_t ROR64( uint64_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 64 - n ) ) );
+}
+
+inline uint32_t ELL( uint32_t x ) {
+  return ROR32( x ^ ( x << 16 ), 16 );
+}
+
+extern uint32_t RCON[];
+
+extern int ROT_X[];
+extern int ROT_Y[];
+// -- alzette
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 591e41d..dc28fd7 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -79,6 +79,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ alzette
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- alzette
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index 881ed7d..d3569cf 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -286,6 +286,86 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ alzette
+#define MATCH_ALZ_RORI         0x0000600B
+#define  MASK_ALZ_RORI         0xC000707F
+#define MATCH_ALZ_RORIW        0x4000600B
+#define  MASK_ALZ_RORIW        0xC000707F
+#define MATCH_ALZ_ADDRORI      0x0000702B
+#define  MASK_ALZ_ADDRORI      0xC000707F
+#define MATCH_ALZ_SUBRORI      0x4000702B
+#define  MASK_ALZ_SUBRORI      0xC000707F
+#define MATCH_ALZ_XORRORI      0x8000702B
+#define  MASK_ALZ_XORRORI      0xC000707F
+#define MATCH_ALZ_RCON         0x0000605B
+#define  MASK_ALZ_RCON         0xF000707F
+#define MATCH_ALZ_RCONW        0x1000605B
+#define  MASK_ALZ_RCONW        0xF000707F
+#define MATCH_ALZ_BLOCK_ENCI   0x4000705B
+#define  MASK_ALZ_BLOCK_ENCI   0xF000707F
+#define MATCH_ALZ_BLOCK_DECI   0x5000705B
+#define  MASK_ALZ_BLOCK_DECI   0xF000707F
+#define MATCH_ALZ_WHOLE_ENCI_X 0x8000705B
+#define  MASK_ALZ_WHOLE_ENCI_X 0xF000707F
+#define MATCH_ALZ_WHOLE_ENCI_Y 0x9000705B
+#define  MASK_ALZ_WHOLE_ENCI_Y 0xF000707F
+#define MATCH_ALZ_WHOLE_DECI_X 0xA000705B
+#define  MASK_ALZ_WHOLE_DECI_X 0xF000707F
+#define MATCH_ALZ_WHOLE_DECI_Y 0xB000705B
+#define  MASK_ALZ_WHOLE_DECI_Y 0xF000707F
+#define MATCH_ALZ_WHOLE_ENCI   0xC000605B
+#define  MASK_ALZ_WHOLE_ENCI   0xF000707F
+#define MATCH_ALZ_WHOLE_DECI   0xD000605B
+#define  MASK_ALZ_WHOLE_DECI   0xF000707F
+#define MATCH_ALZ_PACK         0x0000707B
+#define  MASK_ALZ_PACK         0xFE00707F
+#define MATCH_ALZ_PACKU        0x0200707B
+#define  MASK_ALZ_PACKU        0xFE00707F
+#define MATCH_ALZ_ELL          0x0400707B
+#define  MASK_ALZ_ELL          0xFE00707F
+#define MATCH_ALZ_ELLREV       0x0600707B
+#define  MASK_ALZ_ELLREV       0xFE00707F
+#define MATCH_ALZ_ADDROR_31    0x4000707B
+#define  MASK_ALZ_ADDROR_31    0xFE00707F
+#define MATCH_ALZ_ADDROR_17    0x4200707B
+#define  MASK_ALZ_ADDROR_17    0xFE00707F
+#define MATCH_ALZ_ADDROR_24    0x4400707B
+#define  MASK_ALZ_ADDROR_24    0xFE00707F
+#define MATCH_ALZ_SUBROR_31    0x4600707B
+#define  MASK_ALZ_SUBROR_31    0xFE00707F
+#define MATCH_ALZ_SUBROR_17    0x4800707B
+#define  MASK_ALZ_SUBROR_17    0xFE00707F
+#define MATCH_ALZ_SUBROR_24    0x4A00707B
+#define  MASK_ALZ_SUBROR_24    0xFE00707F
+#define MATCH_ALZ_XORROR_31    0x4C00707B
+#define  MASK_ALZ_XORROR_31    0xFE00707F
+#define MATCH_ALZ_XORROR_17    0x4E00707B
+#define  MASK_ALZ_XORROR_17    0xFE00707F
+#define MATCH_ALZ_XORROR_24    0x5000707B
+#define  MASK_ALZ_XORROR_24    0xFE00707F
+#define MATCH_ALZ_XORROR_16    0x5200707B
+#define  MASK_ALZ_XORROR_16    0xFE00707F
+#define MATCH_ALZ_BLOCK_ENC_0  0x8000707B
+#define  MASK_ALZ_BLOCK_ENC_0  0xFE00707F
+#define MATCH_ALZ_BLOCK_ENC_1  0x8200707B
+#define  MASK_ALZ_BLOCK_ENC_1  0xFE00707F
+#define MATCH_ALZ_BLOCK_ENC_2  0x8400707B
+#define  MASK_ALZ_BLOCK_ENC_2  0xFE00707F
+#define MATCH_ALZ_BLOCK_ENC_3  0x8600707B
+#define  MASK_ALZ_BLOCK_ENC_3  0xFE00707F
+#define MATCH_ALZ_BLOCK_DEC_0  0x8800707B
+#define  MASK_ALZ_BLOCK_DEC_0  0xFE00707F
+#define MATCH_ALZ_BLOCK_DEC_1  0x8A00707B
+#define  MASK_ALZ_BLOCK_DEC_1  0xFE00707F
+#define MATCH_ALZ_BLOCK_DEC_2  0x8C00707B
+#define  MASK_ALZ_BLOCK_DEC_2  0xFE00707F
+#define MATCH_ALZ_BLOCK_DEC_3  0x8E00707B
+#define  MASK_ALZ_BLOCK_DEC_3  0xFE00707F
+#define MATCH_ALZ_WHOLE_ENC    0xC000707B
+#define  MASK_ALZ_WHOLE_ENC    0xFE00707F
+#define MATCH_ALZ_WHOLE_DEC    0xC200707B
+#define  MASK_ALZ_WHOLE_DEC    0xFE00707F
+// -- alzette
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -2426,6 +2506,47 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ alzette
+DECLARE_INSN(alz_rori,         MATCH_ALZ_RORI,         MASK_ALZ_RORI)
+DECLARE_INSN(alz_roriw,        MATCH_ALZ_RORIW,        MASK_ALZ_RORIW)
+DECLARE_INSN(alz_pack,         MATCH_ALZ_PACK,         MASK_ALZ_PACK)
+DECLARE_INSN(alz_packu,        MATCH_ALZ_PACKU,        MASK_ALZ_PACKU)
+DECLARE_INSN(alz_ell,          MATCH_ALZ_ELL,          MASK_ALZ_ELL)
+DECLARE_INSN(alz_ellrev,       MATCH_ALZ_ELLREV,       MASK_ALZ_ELLREV)
+DECLARE_INSN(alz_rcon,         MATCH_ALZ_RCON,         MASK_ALZ_RCON)
+DECLARE_INSN(alz_rconw,        MATCH_ALZ_RCONW,        MASK_ALZ_RCONW)
+DECLARE_INSN(alz_addrori,      MATCH_ALZ_ADDRORI,      MASK_ALZ_ADDRORI)
+DECLARE_INSN(alz_subrori,      MATCH_ALZ_SUBRORI,      MASK_ALZ_SUBRORI)
+DECLARE_INSN(alz_xorrori,      MATCH_ALZ_XORRORI,      MASK_ALZ_XORRORI)
+DECLARE_INSN(alz_addror_31,    MATCH_ALZ_ADDROR_31,    MASK_ALZ_ADDROR_31)
+DECLARE_INSN(alz_addror_17,    MATCH_ALZ_ADDROR_17,    MASK_ALZ_ADDROR_17)
+DECLARE_INSN(alz_addror_24,    MATCH_ALZ_ADDROR_24,    MASK_ALZ_ADDROR_24)
+DECLARE_INSN(alz_subror_31,    MATCH_ALZ_SUBROR_31,    MASK_ALZ_SUBROR_31)
+DECLARE_INSN(alz_subror_17,    MATCH_ALZ_SUBROR_17,    MASK_ALZ_SUBROR_17)
+DECLARE_INSN(alz_subror_24,    MATCH_ALZ_SUBROR_24,    MASK_ALZ_SUBROR_24)
+DECLARE_INSN(alz_xorror_31,    MATCH_ALZ_XORROR_31,    MASK_ALZ_XORROR_31)
+DECLARE_INSN(alz_xorror_17,    MATCH_ALZ_XORROR_17,    MASK_ALZ_XORROR_17)
+DECLARE_INSN(alz_xorror_24,    MATCH_ALZ_XORROR_24,    MASK_ALZ_XORROR_24)
+DECLARE_INSN(alz_xorror_16,    MATCH_ALZ_XORROR_16,    MASK_ALZ_XORROR_16)
+DECLARE_INSN(alz_whole_enci_x, MATCH_ALZ_WHOLE_ENCI_X, MASK_ALZ_WHOLE_ENCI_X)
+DECLARE_INSN(alz_whole_enci_y, MATCH_ALZ_WHOLE_ENCI_Y, MASK_ALZ_WHOLE_ENCI_Y)
+DECLARE_INSN(alz_whole_deci_x, MATCH_ALZ_WHOLE_DECI_X, MASK_ALZ_WHOLE_DECI_X)
+DECLARE_INSN(alz_whole_deci_y, MATCH_ALZ_WHOLE_DECI_Y, MASK_ALZ_WHOLE_DECI_Y)
+DECLARE_INSN(alz_block_enci,   MATCH_ALZ_BLOCK_ENCI,   MASK_ALZ_BLOCK_ENCI)
+DECLARE_INSN(alz_block_deci,   MATCH_ALZ_BLOCK_DECI,   MASK_ALZ_BLOCK_DECI)
+DECLARE_INSN(alz_block_enc_0,  MATCH_ALZ_BLOCK_ENC_0,  MASK_ALZ_BLOCK_ENC_0)
+DECLARE_INSN(alz_block_enc_1,  MATCH_ALZ_BLOCK_ENC_1,  MASK_ALZ_BLOCK_ENC_1)
+DECLARE_INSN(alz_block_enc_2,  MATCH_ALZ_BLOCK_ENC_2,  MASK_ALZ_BLOCK_ENC_2)
+DECLARE_INSN(alz_block_enc_3,  MATCH_ALZ_BLOCK_ENC_3,  MASK_ALZ_BLOCK_ENC_3)
+DECLARE_INSN(alz_block_dec_0,  MATCH_ALZ_BLOCK_DEC_0,  MASK_ALZ_BLOCK_DEC_0)
+DECLARE_INSN(alz_block_dec_1,  MATCH_ALZ_BLOCK_DEC_1,  MASK_ALZ_BLOCK_DEC_1)
+DECLARE_INSN(alz_block_dec_2,  MATCH_ALZ_BLOCK_DEC_2,  MASK_ALZ_BLOCK_DEC_2)
+DECLARE_INSN(alz_block_dec_3,  MATCH_ALZ_BLOCK_DEC_3,  MASK_ALZ_BLOCK_DEC_3)
+DECLARE_INSN(alz_whole_enci,   MATCH_ALZ_WHOLE_ENCI,   MASK_ALZ_WHOLE_ENCI)
+DECLARE_INSN(alz_whole_deci,   MATCH_ALZ_WHOLE_DECI,   MASK_ALZ_WHOLE_DECI)
+DECLARE_INSN(alz_whole_enc,    MATCH_ALZ_WHOLE_ENC,    MASK_ALZ_WHOLE_ENC)
+DECLARE_INSN(alz_whole_dec,    MATCH_ALZ_WHOLE_DEC,    MASK_ALZ_WHOLE_DEC)
+// -- alzette
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/alz_addror_17.h b/riscv/insns/alz_addror_17.h
new file mode 100644
index 0000000..9eab086
--- /dev/null
+++ b/riscv/insns/alz_addror_17.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, 17 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_addror_24.h b/riscv/insns/alz_addror_24.h
new file mode 100644
index 0000000..fb2b95b
--- /dev/null
+++ b/riscv/insns/alz_addror_24.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, 24 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_addror_31.h b/riscv/insns/alz_addror_31.h
new file mode 100644
index 0000000..512f713
--- /dev/null
+++ b/riscv/insns/alz_addror_31.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, 31 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_addrori.h b/riscv/insns/alz_addrori.h
new file mode 100644
index 0000000..65a0818
--- /dev/null
+++ b/riscv/insns/alz_addrori.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, insn.funct7() & 0x1F );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_block_dec_0.h b/riscv/insns/alz_block_dec_0.h
new file mode 100644
index 0000000..5568dfb
--- /dev/null
+++ b/riscv/insns/alz_block_dec_0.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_dec_1.h b/riscv/insns/alz_block_dec_1.h
new file mode 100644
index 0000000..88f668a
--- /dev/null
+++ b/riscv/insns/alz_block_dec_1.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_dec_2.h b/riscv/insns/alz_block_dec_2.h
new file mode 100644
index 0000000..8cbe2ba
--- /dev/null
+++ b/riscv/insns/alz_block_dec_2.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_dec_3.h b/riscv/insns/alz_block_dec_3.h
new file mode 100644
index 0000000..a814a79
--- /dev/null
+++ b/riscv/insns/alz_block_dec_3.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_deci.h b/riscv/insns/alz_block_deci.h
new file mode 100644
index 0000000..6750063
--- /dev/null
+++ b/riscv/insns/alz_block_deci.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, ROT_Y[ insn.funct7() & 0x3 ] );
+         xi = xi - ROR32( yi, ROT_X[ insn.funct7() & 0x3 ] );
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_enc_0.h b/riscv/insns/alz_block_enc_0.h
new file mode 100644
index 0000000..079575e
--- /dev/null
+++ b/riscv/insns/alz_block_enc_0.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_enc_1.h b/riscv/insns/alz_block_enc_1.h
new file mode 100644
index 0000000..1095c85
--- /dev/null
+++ b/riscv/insns/alz_block_enc_1.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_enc_2.h b/riscv/insns/alz_block_enc_2.h
new file mode 100644
index 0000000..a85b4a3
--- /dev/null
+++ b/riscv/insns/alz_block_enc_2.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_enc_3.h b/riscv/insns/alz_block_enc_3.h
new file mode 100644
index 0000000..baed111
--- /dev/null
+++ b/riscv/insns/alz_block_enc_3.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_block_enci.h b/riscv/insns/alz_block_enci.h
new file mode 100644
index 0000000..9f9380c
--- /dev/null
+++ b/riscv/insns/alz_block_enci.h
@@ -0,0 +1,9 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, ROT_X[ insn.funct7() & 0x3 ] );
+         yi = yi ^ ROR32( xi, ROT_Y[ insn.funct7() & 0x3 ] );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_ell.h b/riscv/insns/alz_ell.h
new file mode 100644
index 0000000..c0051fe
--- /dev/null
+++ b/riscv/insns/alz_ell.h
@@ -0,0 +1,20 @@
+if     ( xlen == 32 ) {
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t y_lo = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_lo = ELL( x_lo ^ y_lo );
+
+  WRITE_REG( insn.rd(), ( ( uint32_t )( r_lo ) << 0 )                                  );
+}
+else if( xlen == 64 ) {
+  uint32_t x_hi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t y_hi = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t y_lo = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_hi = ELL( x_hi ^ y_hi );
+  uint32_t r_lo = ELL( x_lo ^ y_lo );
+
+  WRITE_REG( insn.rd(), ( ( uint64_t )( r_lo ) << 0 ) | ( ( uint64_t )( r_hi ) << 32 ) );
+}
+
diff --git a/riscv/insns/alz_ellrev.h b/riscv/insns/alz_ellrev.h
new file mode 100644
index 0000000..b30f2d7
--- /dev/null
+++ b/riscv/insns/alz_ellrev.h
@@ -0,0 +1,12 @@
+if     ( xlen == 64 ) {
+  uint32_t x_hi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t y_hi = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t y_lo = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_hi = ELL( x_hi ^ y_hi );
+  uint32_t r_lo = ELL( x_lo ^ y_lo );
+
+  WRITE_REG( insn.rd(), ( ( uint64_t )( r_hi ) << 0 ) | ( ( uint64_t )( r_lo ) << 32 ) );
+}
+
diff --git a/riscv/insns/alz_pack.h b/riscv/insns/alz_pack.h
new file mode 100644
index 0000000..e1f4b89
--- /dev/null
+++ b/riscv/insns/alz_pack.h
@@ -0,0 +1,9 @@
+if     ( xlen == 64 ) {
+  uint64_t x  = READ_REG( insn.rs1() );
+  uint64_t y  = READ_REG( insn.rs2() );
+
+  uint64_t hi = ( y << 32 ) >>  0;
+  uint64_t lo = ( x << 32 ) >> 32;
+
+  WRITE_REG( insn.rd(), lo | hi );
+}
diff --git a/riscv/insns/alz_packu.h b/riscv/insns/alz_packu.h
new file mode 100644
index 0000000..c5be6a4
--- /dev/null
+++ b/riscv/insns/alz_packu.h
@@ -0,0 +1,9 @@
+if     ( xlen == 64 ) {
+  uint64_t x  = READ_REG( insn.rs1() );
+  uint64_t y  = READ_REG( insn.rs2() );
+
+  uint64_t hi = ( y >> 32 ) << 32;
+  uint64_t lo = ( x >> 32 ) <<  0;
+
+  WRITE_REG( insn.rd(), lo | hi );
+}
diff --git a/riscv/insns/alz_rcon.h b/riscv/insns/alz_rcon.h
new file mode 100644
index 0000000..903d79d
--- /dev/null
+++ b/riscv/insns/alz_rcon.h
@@ -0,0 +1,16 @@
+if     ( xlen == 32 ) {
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_lo = x_lo ^ RCON[ insn.funct7() & 0x7 ];
+
+  WRITE_REG( insn.rd(), ( ( uint32_t )( r_lo ) << 0 )                                  );
+}
+else if( xlen == 64 ) {
+  uint32_t x_hi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_hi = x_hi ^ RCON[ insn.funct7() & 0x7 ];
+  uint32_t r_lo = x_lo ^ RCON[ insn.funct7() & 0x7 ];
+
+  WRITE_REG( insn.rd(), ( ( uint64_t )( r_lo ) << 0 ) | ( ( uint64_t )( r_hi ) << 32 ) );
+}
diff --git a/riscv/insns/alz_rconw.h b/riscv/insns/alz_rconw.h
new file mode 100644
index 0000000..74c6c42
--- /dev/null
+++ b/riscv/insns/alz_rconw.h
@@ -0,0 +1,7 @@
+if     ( xlen == 64 ) {
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_lo = x_lo ^ RCON[ insn.funct7() & 0x7 ];
+
+  WRITE_REG( insn.rd(), ( ( uint32_t )( r_lo ) << 0 )                                  );
+}
diff --git a/riscv/insns/alz_rori.h b/riscv/insns/alz_rori.h
new file mode 100644
index 0000000..79b34a2
--- /dev/null
+++ b/riscv/insns/alz_rori.h
@@ -0,0 +1,15 @@
+if     ( xlen == 32 ) {
+  uint32_t x = READ_REG( insn.rs1() );
+
+  uint32_t r = ROR32( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), r );
+}
+else if( xlen == 64 ) {
+  uint64_t x = READ_REG( insn.rs1() );
+
+  uint64_t r = ROR64( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), r );
+}
+
diff --git a/riscv/insns/alz_roriw.h b/riscv/insns/alz_roriw.h
new file mode 100644
index 0000000..948c321
--- /dev/null
+++ b/riscv/insns/alz_roriw.h
@@ -0,0 +1,7 @@
+if     ( xlen == 64 ) {
+  uint32_t x = READ_REG( insn.rs1() );
+
+  uint32_t r = ROR32( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/alz_subror_17.h b/riscv/insns/alz_subror_17.h
new file mode 100644
index 0000000..6b82f7f
--- /dev/null
+++ b/riscv/insns/alz_subror_17.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, 17 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_subror_24.h b/riscv/insns/alz_subror_24.h
new file mode 100644
index 0000000..a737d0a
--- /dev/null
+++ b/riscv/insns/alz_subror_24.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, 24 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_subror_31.h b/riscv/insns/alz_subror_31.h
new file mode 100644
index 0000000..d6d2739
--- /dev/null
+++ b/riscv/insns/alz_subror_31.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, 31 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_subrori.h b/riscv/insns/alz_subrori.h
new file mode 100644
index 0000000..2e2eb0c
--- /dev/null
+++ b/riscv/insns/alz_subrori.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, insn.funct7() & 0x1F );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_whole_dec.h b/riscv/insns/alz_whole_dec.h
new file mode 100644
index 0000000..5126500
--- /dev/null
+++ b/riscv/insns/alz_whole_dec.h
@@ -0,0 +1,18 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_whole_deci.h b/riscv/insns/alz_whole_deci.h
new file mode 100644
index 0000000..19a54b4
--- /dev/null
+++ b/riscv/insns/alz_whole_deci.h
@@ -0,0 +1,18 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_whole_deci_x.h b/riscv/insns/alz_whole_deci_x.h
new file mode 100644
index 0000000..bc52850
--- /dev/null
+++ b/riscv/insns/alz_whole_deci_x.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+WRITE_REG( insn.rd(), xi );
diff --git a/riscv/insns/alz_whole_deci_y.h b/riscv/insns/alz_whole_deci_y.h
new file mode 100644
index 0000000..f502bc7
--- /dev/null
+++ b/riscv/insns/alz_whole_deci_y.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+WRITE_REG( insn.rd(), yi );
diff --git a/riscv/insns/alz_whole_enc.h b/riscv/insns/alz_whole_enc.h
new file mode 100644
index 0000000..139aeab
--- /dev/null
+++ b/riscv/insns/alz_whole_enc.h
@@ -0,0 +1,18 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_whole_enci.h b/riscv/insns/alz_whole_enci.h
new file mode 100644
index 0000000..3996dac
--- /dev/null
+++ b/riscv/insns/alz_whole_enci.h
@@ -0,0 +1,18 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), ( ( uint64_t )( xi ) << 0 ) | ( ( uint64_t )( yi ) << 32 ) );
diff --git a/riscv/insns/alz_whole_enci_x.h b/riscv/insns/alz_whole_enci_x.h
new file mode 100644
index 0000000..689b632
--- /dev/null
+++ b/riscv/insns/alz_whole_enci_x.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), xi );
diff --git a/riscv/insns/alz_whole_enci_y.h b/riscv/insns/alz_whole_enci_y.h
new file mode 100644
index 0000000..5e4df3e
--- /dev/null
+++ b/riscv/insns/alz_whole_enci_y.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), yi );
diff --git a/riscv/insns/alz_xorror_16.h b/riscv/insns/alz_xorror_16.h
new file mode 100644
index 0000000..77d62b9
--- /dev/null
+++ b/riscv/insns/alz_xorror_16.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 16 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_xorror_17.h b/riscv/insns/alz_xorror_17.h
new file mode 100644
index 0000000..dbd7d67
--- /dev/null
+++ b/riscv/insns/alz_xorror_17.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 17 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_xorror_24.h b/riscv/insns/alz_xorror_24.h
new file mode 100644
index 0000000..45e0ae2
--- /dev/null
+++ b/riscv/insns/alz_xorror_24.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 24 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_xorror_31.h b/riscv/insns/alz_xorror_31.h
new file mode 100644
index 0000000..073fa11
--- /dev/null
+++ b/riscv/insns/alz_xorror_31.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 31 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/alz_xorrori.h b/riscv/insns/alz_xorrori.h
new file mode 100644
index 0000000..b4827c0
--- /dev/null
+++ b/riscv/insns/alz_xorrori.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, insn.funct7() & 0x1F );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index d4422fe..6da9a38 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -40,6 +40,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -918,6 +919,9 @@ riscv_insn_priv = \
 	sret \
 	wfi \
 
+# ++ alzette
+riscv_insn_alz = alz_addror_17 alz_addror_24 alz_addror_31 alz_addrori alz_block_dec_0 alz_block_dec_1 alz_block_dec_2 alz_block_dec_3 alz_block_deci alz_ell alz_ellrev alz_block_enc_0 alz_block_enc_1 alz_block_enc_2 alz_block_enc_3 alz_block_enci alz_pack alz_packu alz_rcon alz_rconw alz_rori alz_roriw alz_subror_17 alz_subror_24 alz_subror_31 alz_subrori alz_whole_dec alz_whole_deci alz_whole_deci_x alz_whole_deci_y alz_whole_enc alz_whole_enci alz_whole_enci_x alz_whole_enci_y alz_xorror_16 alz_xorror_17 alz_xorror_24 alz_xorror_31 alz_xorrori
+# -- alzette
 
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
@@ -933,6 +937,7 @@ riscv_insn_list = \
 	$(if $(HAVE_INT128),$(riscv_insn_ext_v),) \
 	$(riscv_insn_ext_h) \
 	$(riscv_insn_priv) \
+	$(riscv_insn_alz) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
