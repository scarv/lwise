diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..27188e21
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,4 @@
+#include "arith.h"
+
+// ++ lwise
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..9b0bb4e5 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,15 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint64_t ROL64( uint64_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 64 - n ) ) );
+}
+inline uint64_t ROR64( uint64_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 64 - n ) ) );
+}
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..8437b36f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..91f316aa 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,26 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_JAMBU_FSRI    0x0000702B
+#define  MASK_JAMBU_FSRI    0xC000707F
+#define MATCH_JAMBU_FSR_15  0x0000707B
+#define  MASK_JAMBU_FSR_15  0xFE00707F
+#define MATCH_JAMBU_FSR_6   0x0200707B
+#define  MASK_JAMBU_FSR_6   0xFE00707F
+#define MATCH_JAMBU_FSR_21  0x0400707B
+#define  MASK_JAMBU_FSR_21  0xFE00707F
+#define MATCH_JAMBU_FSR_27  0x0600707B
+#define  MASK_JAMBU_FSR_27  0xFE00707F
+#define MATCH_JAMBU_BLOCK_0 0x4000707B
+#define  MASK_JAMBU_BLOCK_0 0xFE00707F
+#define MATCH_JAMBU_BLOCK_1 0x4200707B
+#define  MASK_JAMBU_BLOCK_1 0xFE00707F
+#define MATCH_JAMBU_BLOCK_2 0x4400707B
+#define  MASK_JAMBU_BLOCK_2 0xFE00707F
+#define MATCH_JAMBU_BLOCK_3 0x4600707B
+#define  MASK_JAMBU_BLOCK_3 0xFE00707F
+// -- lwise
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3112,17 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(jambu_fsri,    MATCH_JAMBU_FSRI,    MASK_JAMBU_FSRI)
+DECLARE_INSN(jambu_fsr_15,  MATCH_JAMBU_FSR_15,  MASK_JAMBU_FSR_15)
+DECLARE_INSN(jambu_fsr_6,   MATCH_JAMBU_FSR_6,   MASK_JAMBU_FSR_6)
+DECLARE_INSN(jambu_fsr_21,  MATCH_JAMBU_FSR_21,  MASK_JAMBU_FSR_21)
+DECLARE_INSN(jambu_fsr_27,  MATCH_JAMBU_FSR_27,  MASK_JAMBU_FSR_27)
+DECLARE_INSN(jambu_block_0, MATCH_JAMBU_BLOCK_0, MASK_JAMBU_BLOCK_0)
+DECLARE_INSN(jambu_block_1, MATCH_JAMBU_BLOCK_1, MASK_JAMBU_BLOCK_1)
+DECLARE_INSN(jambu_block_2, MATCH_JAMBU_BLOCK_2, MASK_JAMBU_BLOCK_2)
+DECLARE_INSN(jambu_block_3, MATCH_JAMBU_BLOCK_3, MASK_JAMBU_BLOCK_3)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/jambu_block_0.h b/riscv/insns/jambu_block_0.h
new file mode 100644
index 00000000..57c74cea
--- /dev/null
+++ b/riscv/insns/jambu_block_0.h
@@ -0,0 +1,15 @@
+if( xlen == 64 ) {
+  uint32_t s_0  = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_1  = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t s_2  = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_3  = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+
+  uint32_t t_0  = ROR64( ( ( uint64_t )( s_2 ) << 32 ) | ( ( uint64_t )( s_1 ) << 0 ), 15 );
+  uint32_t t_1  = ROR64( ( ( uint64_t )( s_3 ) << 32 ) | ( ( uint64_t )( s_2 ) << 0 ),  6 );
+  uint32_t t_2  = ROR64( ( ( uint64_t )( s_3 ) << 32 ) | ( ( uint64_t )( s_2 ) << 0 ), 21 );
+  uint32_t t_3  = ROR64( ( ( uint64_t )( s_3 ) << 32 ) | ( ( uint64_t )( s_2 ) << 0 ), 27 );
+
+  uint32_t r    = t_0 ^ ~( t_1 & t_2 ) ^ t_3;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_block_1.h b/riscv/insns/jambu_block_1.h
new file mode 100644
index 00000000..51f979a9
--- /dev/null
+++ b/riscv/insns/jambu_block_1.h
@@ -0,0 +1,15 @@
+if( xlen == 64 ) {
+  uint32_t s_0  = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_1  = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t s_2  = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_3  = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+
+  uint32_t t_0  = ROR64( ( ( uint64_t )( s_3 ) << 32 ) | ( ( uint64_t )( s_2 ) << 0 ), 15 );
+  uint32_t t_1  = ROR64( ( ( uint64_t )( s_0 ) << 32 ) | ( ( uint64_t )( s_3 ) << 0 ),  6 );
+  uint32_t t_2  = ROR64( ( ( uint64_t )( s_0 ) << 32 ) | ( ( uint64_t )( s_3 ) << 0 ), 21 );
+  uint32_t t_3  = ROR64( ( ( uint64_t )( s_0 ) << 32 ) | ( ( uint64_t )( s_3 ) << 0 ), 27 );
+
+  uint32_t r    = t_0 ^ ~( t_1 & t_2 ) ^ t_3;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_block_2.h b/riscv/insns/jambu_block_2.h
new file mode 100644
index 00000000..5e2ea624
--- /dev/null
+++ b/riscv/insns/jambu_block_2.h
@@ -0,0 +1,15 @@
+if( xlen == 64 ) {
+  uint32_t s_0  = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_1  = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t s_2  = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_3  = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+
+  uint32_t t_0  = ROR64( ( ( uint64_t )( s_0 ) << 32 ) | ( ( uint64_t )( s_3 ) << 0 ), 15 );
+  uint32_t t_1  = ROR64( ( ( uint64_t )( s_1 ) << 32 ) | ( ( uint64_t )( s_0 ) << 0 ),  6 );
+  uint32_t t_2  = ROR64( ( ( uint64_t )( s_1 ) << 32 ) | ( ( uint64_t )( s_0 ) << 0 ), 21 );
+  uint32_t t_3  = ROR64( ( ( uint64_t )( s_1 ) << 32 ) | ( ( uint64_t )( s_0 ) << 0 ), 27 );
+
+  uint32_t r    = t_0 ^ ~( t_1 & t_2 ) ^ t_3;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_block_3.h b/riscv/insns/jambu_block_3.h
new file mode 100644
index 00000000..e50a695b
--- /dev/null
+++ b/riscv/insns/jambu_block_3.h
@@ -0,0 +1,15 @@
+if( xlen == 64 ) {
+  uint32_t s_0  = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_1  = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t s_2  = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t s_3  = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+
+  uint32_t t_0  = ROR64( ( ( uint64_t )( s_1 ) << 32 ) | ( ( uint64_t )( s_0 ) << 0 ), 15 );
+  uint32_t t_1  = ROR64( ( ( uint64_t )( s_2 ) << 32 ) | ( ( uint64_t )( s_1 ) << 0 ),  6 );
+  uint32_t t_2  = ROR64( ( ( uint64_t )( s_2 ) << 32 ) | ( ( uint64_t )( s_1 ) << 0 ), 21 );
+  uint32_t t_3  = ROR64( ( ( uint64_t )( s_2 ) << 32 ) | ( ( uint64_t )( s_1 ) << 0 ), 27 );
+
+  uint32_t r    = t_0 ^ ~( t_1 & t_2 ) ^ t_3;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_fsr_15.h b/riscv/insns/jambu_fsr_15.h
new file mode 100644
index 00000000..6fd04dca
--- /dev/null
+++ b/riscv/insns/jambu_fsr_15.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+
+  uint32_t r    = ROR64( ( ( uint64_t )( x_hi ) << 32 ) | ( ( uint64_t )( x_lo ) << 0 ), 15 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_fsr_21.h b/riscv/insns/jambu_fsr_21.h
new file mode 100644
index 00000000..bfe3b430
--- /dev/null
+++ b/riscv/insns/jambu_fsr_21.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+
+  uint32_t r    = ROR64( ( ( uint64_t )( x_hi ) << 32 ) | ( ( uint64_t )( x_lo ) << 0 ), 21 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_fsr_27.h b/riscv/insns/jambu_fsr_27.h
new file mode 100644
index 00000000..0350ef8b
--- /dev/null
+++ b/riscv/insns/jambu_fsr_27.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+
+  uint32_t r    = ROR64( ( ( uint64_t )( x_hi ) << 32 ) | ( ( uint64_t )( x_lo ) << 0 ), 27 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_fsr_6.h b/riscv/insns/jambu_fsr_6.h
new file mode 100644
index 00000000..ebd4d480
--- /dev/null
+++ b/riscv/insns/jambu_fsr_6.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+
+  uint32_t r    = ROR64( ( ( uint64_t )( x_hi ) << 32 ) | ( ( uint64_t )( x_lo ) << 0 ),  6 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/jambu_fsri.h b/riscv/insns/jambu_fsri.h
new file mode 100644
index 00000000..bcd017e0
--- /dev/null
+++ b/riscv/insns/jambu_fsri.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+
+  uint32_t r    = ROR64( ( ( uint64_t )( x_hi ) << 32 ) | ( ( uint64_t )( x_lo ) << 0 ), insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/pack.h b/riscv/insns/pack.h
index 2b09e7ed..bb22147f 100644
--- a/riscv/insns/pack.h
+++ b/riscv/insns/pack.h
@@ -2,7 +2,7 @@
 require(((xlen == 32) && (insn.rs2() == 0) && p->extension_enabled(EXT_ZBB))
   || p->extension_enabled(EXT_ZBKB)
   || p->extension_enabled(EXT_XBITMANIP));
-require(SHAMT < (xlen/2));
+//require(SHAMT < (xlen/2));
 reg_t lo = zext_xlen(RS1 << (xlen/2)) >> (xlen/2);
 reg_t hi = zext_xlen(RS2 << (xlen/2));
 WRITE_RD(sext_xlen(lo | hi));
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..6816d154 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwise
+riscv_insn_lwise = jambu_block_0 jambu_block_1 jambu_block_2 jambu_block_3 jambu_fsr_15 jambu_fsr_21 jambu_fsr_27 jambu_fsr_6 jambu_fsri
+# -- lwise
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
