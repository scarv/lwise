diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..27188e21
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,4 @@
+#include "arith.h"
+
+// ++ lwise
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..2a9c5b43 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,32 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+
+inline uint32_t SWAPMOVE32_X( uint32_t x, uint32_t y, uint32_t m, int n ) {
+  uint32_t t = y ^ ( x >> n );
+           t = t & m;
+           x = x ^ ( t << n );
+
+  return x;
+}
+
+inline uint32_t SWAPMOVE32_Y( uint32_t x, uint32_t y, uint32_t m, int n ) {
+  uint32_t t = y ^ ( x >> n );
+           t = t & m;
+           y = y ^ ( t      );
+
+  return y;
+}
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..8437b36f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..7ee34583 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,12 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_ELEPHANT_PSTEP2_X 0x0000700B
+#define  MASK_ELEPHANT_PSTEP2_X 0xF000707F
+#define MATCH_ELEPHANT_PSTEP2_Y 0x1000700B
+#define  MASK_ELEPHANT_PSTEP2_Y 0xF000707F
+// -- lwise
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3098,10 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(elephant_pstep2_x, MATCH_ELEPHANT_PSTEP2_X, MASK_ELEPHANT_PSTEP2_X)
+DECLARE_INSN(elephant_pstep2_y, MATCH_ELEPHANT_PSTEP2_Y, MASK_ELEPHANT_PSTEP2_Y)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/elephant_pstep2_x.h b/riscv/insns/elephant_pstep2_x.h
new file mode 100644
index 00000000..4e80b5c2
--- /dev/null
+++ b/riscv/insns/elephant_pstep2_x.h
@@ -0,0 +1,31 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x7;
+
+  uint32_t r;
+
+  if      ( imm == 0 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x000000FF,  8 )     );
+  }
+  else if ( imm == 1 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x000000FF, 16 )     );
+  }
+  else if ( imm == 2 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x000000FF, 24 )     );
+  }
+  else if ( imm == 3 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x0000FF00,  8 )     );
+  }
+  else if ( imm == 4 ) {
+    r = ROR32( SWAPMOVE32_X( x, y, 0x000000FF, 24 ), 24 );
+  }
+  else if ( imm == 5 ) {
+    r = ROR32( SWAPMOVE32_X( x, y, 0x0000FF00, 16 ), 16 );
+  }
+  else if ( imm == 6 ) {
+    r = ROR32( SWAPMOVE32_X( x, y, 0x00FF0000,  8 ),  8 );
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_pstep2_y.h b/riscv/insns/elephant_pstep2_y.h
new file mode 100644
index 00000000..486dee3a
--- /dev/null
+++ b/riscv/insns/elephant_pstep2_y.h
@@ -0,0 +1,31 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x7;
+
+  uint32_t r;
+
+  if      ( imm == 0 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF,  8 );
+  }
+  else if ( imm == 1 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF, 16 );
+  }
+  else if ( imm == 2 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF, 24 );
+  }
+  else if ( imm == 3 ) {
+    r = SWAPMOVE32_Y( x, y, 0x0000FF00,  8 );
+  }
+  else if ( imm == 4 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF, 24 );
+  }
+  else if ( imm == 5 ) {
+    r = SWAPMOVE32_Y( x, y, 0x0000FF00, 16 );
+  }
+  else if ( imm == 6 ) {
+    r = SWAPMOVE32_Y( x, y, 0x00FF0000,  8 );
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/pack.h b/riscv/insns/pack.h
index 2b09e7ed..bb22147f 100644
--- a/riscv/insns/pack.h
+++ b/riscv/insns/pack.h
@@ -2,7 +2,7 @@
 require(((xlen == 32) && (insn.rs2() == 0) && p->extension_enabled(EXT_ZBB))
   || p->extension_enabled(EXT_ZBKB)
   || p->extension_enabled(EXT_XBITMANIP));
-require(SHAMT < (xlen/2));
+//require(SHAMT < (xlen/2));
 reg_t lo = zext_xlen(RS1 << (xlen/2)) >> (xlen/2);
 reg_t hi = zext_xlen(RS2 << (xlen/2));
 WRITE_RD(sext_xlen(lo | hi));
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..a4da9eb8 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwis
+riscv_insn_lwise = elephant_pstep2_x elephant_pstep2_y
+# -- lwise 
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
