diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..abb5fd7f
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,8 @@
+#include "arith.h"
+
+// ++ lwise
+uint8_t SBOX[ 16 ] = {
+  0xE, 0xD, 0xB, 0x0, 0x2, 0x1, 0x4, 0xF, 
+  0x7, 0xA, 0x8, 0x5, 0x9, 0xC, 0x3, 0x6
+};
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..31a3b29b 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,43 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+
+inline uint32_t SWAPMOVE32  ( uint32_t x,             uint32_t m, int n ) {
+  uint32_t t = x ^ ( x >> n );
+           t = t & m;
+           t = t ^ ( t << n );
+           x = t ^ x;
+
+  return x;
+}
+
+inline uint32_t SWAPMOVE32_X( uint32_t x, uint32_t y, uint32_t m, int n ) {
+  uint32_t t = y ^ ( x >> n );
+           t = t & m;
+           x = x ^ ( t << n );
+
+  return x;
+}
+
+inline uint32_t SWAPMOVE32_Y( uint32_t x, uint32_t y, uint32_t m, int n ) {
+  uint32_t t = y ^ ( x >> n );
+           t = t & m;
+           y = y ^ ( t      );
+
+  return y;
+}
+
+extern uint8_t SBOX[ 16 ];
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..8437b36f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..fa4cd58b 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,16 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_ELEPHANT_PSTEP_X 0x0000700B
+#define  MASK_ELEPHANT_PSTEP_X 0xF000707F
+#define MATCH_ELEPHANT_PSTEP_Y 0x1000700B
+#define  MASK_ELEPHANT_PSTEP_Y 0xF000707F
+#define MATCH_ELEPHANT_SSTEP   0x2000600B
+#define  MASK_ELEPHANT_SSTEP   0xF000707F
+#define MATCH_ELEPHANT_XORICR  0x0000602B
+#define  MASK_ELEPHANT_XORICR  0x0000707F
+// -- lwise
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3102,12 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(elephant_pstep_x, MATCH_ELEPHANT_PSTEP_X, MASK_ELEPHANT_PSTEP_X)
+DECLARE_INSN(elephant_pstep_y, MATCH_ELEPHANT_PSTEP_Y, MASK_ELEPHANT_PSTEP_Y)
+DECLARE_INSN(elephant_sstep,   MATCH_ELEPHANT_SSTEP,   MASK_ELEPHANT_SSTEP)
+DECLARE_INSN(elephant_xoricr,  MATCH_ELEPHANT_XORICR,  MASK_ELEPHANT_XORICR)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/elephant_pstep_x.h b/riscv/insns/elephant_pstep_x.h
new file mode 100644
index 00000000..4e80b5c2
--- /dev/null
+++ b/riscv/insns/elephant_pstep_x.h
@@ -0,0 +1,31 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x7;
+
+  uint32_t r;
+
+  if      ( imm == 0 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x000000FF,  8 )     );
+  }
+  else if ( imm == 1 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x000000FF, 16 )     );
+  }
+  else if ( imm == 2 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x000000FF, 24 )     );
+  }
+  else if ( imm == 3 ) {
+    r =      ( SWAPMOVE32_X( x, y, 0x0000FF00,  8 )     );
+  }
+  else if ( imm == 4 ) {
+    r = ROR32( SWAPMOVE32_X( x, y, 0x000000FF, 24 ), 24 );
+  }
+  else if ( imm == 5 ) {
+    r = ROR32( SWAPMOVE32_X( x, y, 0x0000FF00, 16 ), 16 );
+  }
+  else if ( imm == 6 ) {
+    r = ROR32( SWAPMOVE32_X( x, y, 0x00FF0000,  8 ),  8 );
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_pstep_y.h b/riscv/insns/elephant_pstep_y.h
new file mode 100644
index 00000000..486dee3a
--- /dev/null
+++ b/riscv/insns/elephant_pstep_y.h
@@ -0,0 +1,31 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x7;
+
+  uint32_t r;
+
+  if      ( imm == 0 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF,  8 );
+  }
+  else if ( imm == 1 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF, 16 );
+  }
+  else if ( imm == 2 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF, 24 );
+  }
+  else if ( imm == 3 ) {
+    r = SWAPMOVE32_Y( x, y, 0x0000FF00,  8 );
+  }
+  else if ( imm == 4 ) {
+    r = SWAPMOVE32_Y( x, y, 0x000000FF, 24 );
+  }
+  else if ( imm == 5 ) {
+    r = SWAPMOVE32_Y( x, y, 0x0000FF00, 16 );
+  }
+  else if ( imm == 6 ) {
+    r = SWAPMOVE32_Y( x, y, 0x00FF0000,  8 );
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_sstep.h b/riscv/insns/elephant_sstep.h
new file mode 100644
index 00000000..c47ba3a0
--- /dev/null
+++ b/riscv/insns/elephant_sstep.h
@@ -0,0 +1,19 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+
+  uint32_t r   = ( ( uint32_t )( SBOX[ ( x >> 28 ) & 0xF ] ) << 28 ) |
+                 ( ( uint32_t )( SBOX[ ( x >> 24 ) & 0xF ] ) << 24 ) |
+                 ( ( uint32_t )( SBOX[ ( x >> 20 ) & 0xF ] ) << 20 ) |
+                 ( ( uint32_t )( SBOX[ ( x >> 16 ) & 0xF ] ) << 16 ) |
+                 ( ( uint32_t )( SBOX[ ( x >> 12 ) & 0xF ] ) << 12 ) |
+                 ( ( uint32_t )( SBOX[ ( x >>  8 ) & 0xF ] ) <<  8 ) |
+                 ( ( uint32_t )( SBOX[ ( x >>  4 ) & 0xF ] ) <<  4 ) |
+                 ( ( uint32_t )( SBOX[ ( x >>  0 ) & 0xF ] ) <<  0 ) ;
+                 
+           r   = SWAPMOVE32( r, 0x0A0A0A0A,  3 );
+           r   = SWAPMOVE32( r, 0x00CC00CC,  6 );
+           r   = SWAPMOVE32( r, 0x0000F0F0, 12 );
+           r   = SWAPMOVE32( r, 0x0000FF00,  8 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_xoricr.h b/riscv/insns/elephant_xoricr.h
new file mode 100644
index 00000000..93cd852b
--- /dev/null
+++ b/riscv/insns/elephant_xoricr.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t imm = insn.i_imm() & 0xFF;
+
+  uint32_t r   = x ^ ( imm << 24 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/pack.h b/riscv/insns/pack.h
index 2b09e7ed..bb22147f 100644
--- a/riscv/insns/pack.h
+++ b/riscv/insns/pack.h
@@ -2,7 +2,7 @@
 require(((xlen == 32) && (insn.rs2() == 0) && p->extension_enabled(EXT_ZBB))
   || p->extension_enabled(EXT_ZBKB)
   || p->extension_enabled(EXT_XBITMANIP));
-require(SHAMT < (xlen/2));
+//require(SHAMT < (xlen/2));
 reg_t lo = zext_xlen(RS1 << (xlen/2)) >> (xlen/2);
 reg_t hi = zext_xlen(RS2 << (xlen/2));
 WRITE_RD(sext_xlen(lo | hi));
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..6aac6f78 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwis
+riscv_insn_lwise = elephant_pstep_x elephant_pstep_y elephant_sstep elephant_xoricr
+# -- lwise 
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
