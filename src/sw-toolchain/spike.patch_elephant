diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..27188e21
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,4 @@
+#include "arith.h"
+
+// ++ lwise
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..08df2144 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,17 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint32_t SWAPMOVE32( uint32_t x, uint32_t m, int n ) {
+  uint32_t t = x ^ ( x >> n );
+           t = t & m;
+           t = t ^ ( t << n );
+           x = t ^ x;
+
+  return x;
+}
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..8437b36f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..8db6e637 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,24 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_ELEPHANT_BSLLXOR   0x0000700B
+#define  MASK_ELEPHANT_BSLLXOR   0xC000707F
+#define MATCH_ELEPHANT_BUP       0x8000700B
+#define  MASK_ELEPHANT_BUP       0xC000707F
+#define MATCH_ELEPHANT_BUPD      0xC000700B
+#define  MASK_ELEPHANT_BUPD      0xC000707F
+#define MATCH_ELEPHANT_PSTEP1    0x0000602B
+#define  MASK_ELEPHANT_PSTEP1    0xC000707F
+#define MATCH_ELEPHANT_PSTEP2_0  0x0000705B
+#define  MASK_ELEPHANT_PSTEP2_0  0xC000707F
+#define MATCH_ELEPHANT_PSTEP2_8  0x4000705B
+#define  MASK_ELEPHANT_PSTEP2_8  0xC000707F
+#define MATCH_ELEPHANT_PSTEP2_16 0x8000705B
+#define  MASK_ELEPHANT_PSTEP2_16 0xC000707F
+#define MATCH_ELEPHANT_PSTEP2_24 0xC000705B
+#define  MASK_ELEPHANT_PSTEP2_24 0xC000707F
+// -- lwise
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3110,16 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(elephant_bsllxor,   MATCH_ELEPHANT_BSLLXOR,   MASK_ELEPHANT_BSLLXOR)
+DECLARE_INSN(elephant_bup,       MATCH_ELEPHANT_BUP,       MASK_ELEPHANT_BUP)
+DECLARE_INSN(elephant_bupd,      MATCH_ELEPHANT_BUPD,      MASK_ELEPHANT_BUPD)
+DECLARE_INSN(elephant_pstep1,    MATCH_ELEPHANT_PSTEP1,    MASK_ELEPHANT_PSTEP1)
+DECLARE_INSN(elephant_pstep2_0,  MATCH_ELEPHANT_PSTEP2_0,  MASK_ELEPHANT_PSTEP2_0)
+DECLARE_INSN(elephant_pstep2_8,  MATCH_ELEPHANT_PSTEP2_8,  MASK_ELEPHANT_PSTEP2_8)
+DECLARE_INSN(elephant_pstep2_16, MATCH_ELEPHANT_PSTEP2_16, MASK_ELEPHANT_PSTEP2_16)
+DECLARE_INSN(elephant_pstep2_24, MATCH_ELEPHANT_PSTEP2_24, MASK_ELEPHANT_PSTEP2_24)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/elephant_bsllxor.h b/riscv/insns/elephant_bsllxor.h
new file mode 100644
index 00000000..3cc94492
--- /dev/null
+++ b/riscv/insns/elephant_bsllxor.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x1F;
+
+  uint32_t r   = x ^ ( (   y         & 0xFF ) << imm );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_bup.h b/riscv/insns/elephant_bup.h
new file mode 100644
index 00000000..29608829
--- /dev/null
+++ b/riscv/insns/elephant_bup.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x1F;
+
+  uint32_t r   = ( x << ( imm - y     ) ) & ( 1 << imm );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_bupd.h b/riscv/insns/elephant_bupd.h
new file mode 100644
index 00000000..fb865566
--- /dev/null
+++ b/riscv/insns/elephant_bupd.h
@@ -0,0 +1,12 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x1F;
+
+  uint32_t r_0 = ( x << ( imm - y     ) ) & ( 1 << imm );
+  uint32_t r_1 = ( x << ( imm - y - 3 ) ) & ( 2 << imm );
+
+  uint32_t r   = r_0 ^ r_1;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_pstep1.h b/riscv/insns/elephant_pstep1.h
new file mode 100644
index 00000000..bf98aaf1
--- /dev/null
+++ b/riscv/insns/elephant_pstep1.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+
+  uint32_t r   = SWAPMOVE32( x, 0x0A0A0A0AUL,  3 );
+           r   = SWAPMOVE32( r, 0x00CC00CCUL,  6 );
+           r   = SWAPMOVE32( r, 0x0000F0F0UL, 12 );
+           r   = SWAPMOVE32( r, 0x000000FFUL, 24 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_pstep2_0.h b/riscv/insns/elephant_pstep2_0.h
new file mode 100644
index 00000000..830f9439
--- /dev/null
+++ b/riscv/insns/elephant_pstep2_0.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x1F;
+
+  uint32_t r   = x ^ ( ( ( y >>  0 ) & 0xFF ) << imm );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_pstep2_16.h b/riscv/insns/elephant_pstep2_16.h
new file mode 100644
index 00000000..8c6bbba0
--- /dev/null
+++ b/riscv/insns/elephant_pstep2_16.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x1F;
+
+  uint32_t r   = x ^ ( ( ( y >> 16 ) & 0xFF ) << imm );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_pstep2_24.h b/riscv/insns/elephant_pstep2_24.h
new file mode 100644
index 00000000..e46b4231
--- /dev/null
+++ b/riscv/insns/elephant_pstep2_24.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x1F;
+
+  uint32_t r   = x ^ ( ( ( y >> 24 ) & 0xFF ) << imm );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/elephant_pstep2_8.h b/riscv/insns/elephant_pstep2_8.h
new file mode 100644
index 00000000..39235816
--- /dev/null
+++ b/riscv/insns/elephant_pstep2_8.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t y   = READ_REG( insn.rs2() );
+  uint32_t imm = insn.funct7() & 0x1F;
+
+  uint32_t r   = x ^ ( ( ( y >>  8 ) & 0xFF ) << imm );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..26138396 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwis
+riscv_insn_lwise = elephant_bsllxor elephant_bup elephant_bupd elephant_pstep1 elephant_pstep2_0 elephant_pstep2_8 elephant_pstep2_16 elephant_pstep2_24
+# -- lwise 
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
