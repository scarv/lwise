diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..27188e21
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,4 @@
+#include "arith.h"
+
+// ++ lwise
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..16ed4b1f 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,42 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint32_t ROL4 ( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> (  4 - n ) ) ) & 0xF;
+}
+inline uint32_t ROR4 ( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << (  4 - n ) ) ) & 0xF;
+}
+inline uint32_t ROL8 ( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> (  8 - n ) ) ) & 0xFF;
+}
+inline uint32_t ROR8 ( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << (  8 - n ) ) ) & 0xFF;
+}
+inline uint32_t ROL16( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 16 - n ) ) ) & 0xFFFF;
+}
+inline uint32_t ROR16( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 16 - n ) ) ) & 0xFFFF;
+}
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) ) & 0xFFFFFFFF;
+}
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) ) & 0xFFFFFFFF;
+}
+
+inline uint32_t SWAPMOVE32( uint32_t x, uint32_t m, int n ) {
+  uint32_t t = x ^ ( x >> n );
+           t = t & m;
+           t = t ^ ( t << n );
+           x = t ^ x;
+
+  return x;
+}
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..8437b36f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..25b921e7 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,22 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_GIFT_SWAPMOVE   0x0000700B
+#define  MASK_GIFT_SWAPMOVE   0xC000707F
+#define MATCH_GIFT_RORI_N     0x4000600B
+#define  MASK_GIFT_RORI_N     0xC000707F
+#define MATCH_GIFT_RORI_B     0x8000600B
+#define  MASK_GIFT_RORI_B     0xC000707F
+#define MATCH_GIFT_RORI_H     0xC000600B
+#define  MASK_GIFT_RORI_H     0xC000707F
+#define MATCH_GIFT_KEY_REORG  0x0000602B
+#define  MASK_GIFT_KEY_REORG  0xC000707F
+#define MATCH_GIFT_KEY_UPDSTD 0x4000602B
+#define  MASK_GIFT_KEY_UPDSTD 0xC000707F
+#define MATCH_GIFT_KEY_UPDFIX 0x8000602B
+#define  MASK_GIFT_KEY_UPDFIX 0xC000707F
+// -- lwise
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3108,15 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(gift_swapmove,   MATCH_GIFT_SWAPMOVE,   MASK_GIFT_SWAPMOVE)
+DECLARE_INSN(gift_rori_n,     MATCH_GIFT_RORI_N,     MASK_GIFT_RORI_N)
+DECLARE_INSN(gift_rori_b,     MATCH_GIFT_RORI_B,     MASK_GIFT_RORI_B)
+DECLARE_INSN(gift_rori_h,     MATCH_GIFT_RORI_H,     MASK_GIFT_RORI_H)
+DECLARE_INSN(gift_key_reorg,  MATCH_GIFT_KEY_REORG,  MASK_GIFT_KEY_REORG)
+DECLARE_INSN(gift_key_updstd, MATCH_GIFT_KEY_UPDSTD, MASK_GIFT_KEY_UPDSTD)
+DECLARE_INSN(gift_key_updfix, MATCH_GIFT_KEY_UPDFIX, MASK_GIFT_KEY_UPDFIX)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/gift_key_reorg.h b/riscv/insns/gift_key_reorg.h
new file mode 100644
index 00000000..5f24c4eb
--- /dev/null
+++ b/riscv/insns/gift_key_reorg.h
@@ -0,0 +1,40 @@
+if( xlen == 32 ) {
+  uint32_t r, x = READ_REG( insn.rs1() );
+
+  switch( insn.funct7() & 0x1F ) {
+    case 0 : {
+      r = SWAPMOVE32( x, 0x00550055,  9 );
+      r = SWAPMOVE32( r, 0x00003333, 18 );
+      r = SWAPMOVE32( r, 0x000F000F, 12 );
+      r = SWAPMOVE32( r, 0x000000FF, 24 );
+
+      break;
+    }
+    case 1 : {
+      r = SWAPMOVE32( x, 0x11111111,  3 );
+      r = SWAPMOVE32( r, 0x03030303,  6 );
+      r = SWAPMOVE32( r, 0x000F000F, 12 );
+      r = SWAPMOVE32( r, 0x000000FF, 24 );
+
+      break;
+    }
+    case 2 : {
+      r = SWAPMOVE32( x, 0x0000AAAA, 15 );
+      r = SWAPMOVE32( r, 0x00003333, 18 );
+      r = SWAPMOVE32( r, 0x0000F0F0, 12 );
+      r = SWAPMOVE32( r, 0x000000FF, 24 );
+
+      break;
+    }
+    case 3 : {
+      r = SWAPMOVE32( x, 0x0A0A0A0A,  3 );
+      r = SWAPMOVE32( r, 0x00CC00CC,  6 );
+      r = SWAPMOVE32( r, 0x0000F0F0, 12 );
+      r = SWAPMOVE32( r, 0x000000FF, 24 );
+
+      break;
+    }
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/gift_key_updfix.h b/riscv/insns/gift_key_updfix.h
new file mode 100644
index 00000000..64e73d25
--- /dev/null
+++ b/riscv/insns/gift_key_updfix.h
@@ -0,0 +1,86 @@
+if( xlen == 32 ) {
+  uint32_t r, x = READ_REG( insn.rs1() );
+
+  switch( insn.funct7() & 0x1F ) {
+    case 0 : {
+      r = SWAPMOVE32( x, 0x00003333, 16 );
+      r = SWAPMOVE32( r, 0x55554444,  1 );
+
+      break;
+    }
+    case 1 : {
+      r =     ROR32( x & 0x33333333, 24 );
+      r = r | ROR32( x & 0xCCCCCCCC, 16 );
+      r = SWAPMOVE32( r, 0x55551100,  1 );
+
+      break;
+    }
+    case 2 : {
+      r =     ( ( x >>  4 ) & 0x0F000F00 );
+      r = r | ( ( x & 0x0F000F00 ) <<  4 );
+      r = r | ( ( x >>  6 ) & 0x00030003 );
+      r = r | ( ( x & 0x003F003F ) <<  2 );
+
+      break;
+    }
+    case 3 : {
+      r =     ( ( x >>  6 ) & 0x03000300 );
+      r = r | ( ( x & 0x3F003F00 ) <<  2 );
+      r = r | ( ( x >>  5 ) & 0x00070007 );
+      r = r | ( ( x & 0x001F001F ) <<  3 );
+
+      break;
+    }
+    case 4 : {
+      r =     ROR32( x & 0xAAAAAAAA, 24 );
+      r = r | ROR32( x & 0x55555555, 16 );
+
+      break;
+    }
+    case 5 : {
+      r =     ROR32( x & 0x55555555, 24 );
+      r = r | ROR32( x & 0xAAAAAAAA, 20 );
+
+      break;
+    }
+    case 6 : {
+      r =     ( ( x >>  2 ) & 0x03030303 );
+      r = r | ( ( x & 0x03030303 ) <<  2 );
+      r = r | ( ( x >>  1 ) & 0x70707070 );
+      r = r | ( ( x & 0x10101010 ) <<  3 );
+
+      break;
+    }
+    case 7 : {
+      r =     ( ( x >> 18 ) & 0x00003030 );
+      r = r | ( ( x & 0x01010101 ) <<  3 );
+      r = r | ( ( x >> 14 ) & 0x0000C0C0 );
+      r = r | ( ( x & 0x0000E0E0 ) << 15 );
+      r = r | ( ( x >>  1 ) & 0x07070707 );
+      r = r | ( ( x & 0x00001010 ) << 19 );
+
+      break;
+    }
+    case 8 : {
+      r =     ( ( x >>  4 ) & 0x0FFF0000 );
+      r = r | ( ( x & 0x000F0000 ) << 12 );
+      r = r | ( ( x >>  8 ) & 0x000000FF );
+      r = r | ( ( x & 0x000000FF ) <<  8 );
+
+      break;
+    }
+    case 9 : {
+      r =     ( ( x >>  6 ) & 0x03FF0000 );
+      r = r | ( ( x & 0x003F0000 ) << 10 );
+      r = r | ( ( x >>  4 ) & 0x00000FFF );
+      r = r | ( ( x & 0x0000000F ) << 12 );
+
+      break;
+    }
+    default : {
+      abort();
+    }
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/gift_key_updstd.h b/riscv/insns/gift_key_updstd.h
new file mode 100644
index 00000000..f3476173
--- /dev/null
+++ b/riscv/insns/gift_key_updstd.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t r, x = READ_REG( insn.rs1() );
+
+      r =     ( ( x >> 12 ) & 0x0000000F );
+      r = r | ( ( x & 0x00000FFF ) <<  4 );
+      r = r | ( ( x >>  2 ) & 0x3FFF0000 );
+      r = r | ( ( x & 0x00030000 ) << 14 );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/gift_rori_b.h b/riscv/insns/gift_rori_b.h
new file mode 100644
index 00000000..86735e34
--- /dev/null
+++ b/riscv/insns/gift_rori_b.h
@@ -0,0 +1,15 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+
+  uint32_t x_3 = ( x >> 24 ) & 0xFF;
+  uint32_t x_2 = ( x >> 16 ) & 0xFF;
+  uint32_t x_1 = ( x >>  8 ) & 0xFF;
+  uint32_t x_0 = ( x >>  0 ) & 0xFF;
+
+  uint32_t r   = ( ( uint32_t )( ROR8 ( x_3, insn.funct7() & 0x1F ) ) << 24 ) |
+                 ( ( uint32_t )( ROR8 ( x_2, insn.funct7() & 0x1F ) ) << 16 ) |
+                 ( ( uint32_t )( ROR8 ( x_1, insn.funct7() & 0x1F ) ) <<  8 ) |
+                 ( ( uint32_t )( ROR8 ( x_0, insn.funct7() & 0x1F ) ) <<  0 ) ;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/gift_rori_h.h b/riscv/insns/gift_rori_h.h
new file mode 100644
index 00000000..2b1b3de8
--- /dev/null
+++ b/riscv/insns/gift_rori_h.h
@@ -0,0 +1,11 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+
+  uint32_t x_1 = ( x >> 16 ) & 0xFFFF;
+  uint32_t x_0 = ( x >>  0 ) & 0xFFFF;
+
+  uint32_t r   = ( ( uint32_t )( ROR16( x_1, insn.funct7() & 0x1F ) ) << 16 ) |
+                 ( ( uint32_t )( ROR16( x_0, insn.funct7() & 0x1F ) ) <<  0 ) ;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/gift_rori_n.h b/riscv/insns/gift_rori_n.h
new file mode 100644
index 00000000..f32824a6
--- /dev/null
+++ b/riscv/insns/gift_rori_n.h
@@ -0,0 +1,23 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+
+  uint32_t x_7 = ( x >> 28 ) & 0xF;
+  uint32_t x_6 = ( x >> 24 ) & 0xF;
+  uint32_t x_5 = ( x >> 20 ) & 0xF;
+  uint32_t x_4 = ( x >> 16 ) & 0xF;
+  uint32_t x_3 = ( x >> 12 ) & 0xF;
+  uint32_t x_2 = ( x >>  8 ) & 0xF;
+  uint32_t x_1 = ( x >>  4 ) & 0xF;
+  uint32_t x_0 = ( x >>  0 ) & 0xF;
+
+  uint32_t r   = ( ( uint32_t )( ROR4 ( x_7, insn.funct7() & 0x1F ) ) << 28 ) |
+                 ( ( uint32_t )( ROR4 ( x_6, insn.funct7() & 0x1F ) ) << 24 ) |
+                 ( ( uint32_t )( ROR4 ( x_5, insn.funct7() & 0x1F ) ) << 20 ) |
+                 ( ( uint32_t )( ROR4 ( x_4, insn.funct7() & 0x1F ) ) << 16 ) |
+                 ( ( uint32_t )( ROR4 ( x_3, insn.funct7() & 0x1F ) ) << 12 ) |
+                 ( ( uint32_t )( ROR4 ( x_2, insn.funct7() & 0x1F ) ) <<  8 ) |
+                 ( ( uint32_t )( ROR4 ( x_1, insn.funct7() & 0x1F ) ) <<  4 ) |
+                 ( ( uint32_t )( ROR4 ( x_0, insn.funct7() & 0x1F ) ) <<  0 ) ;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/gift_swapmove.h b/riscv/insns/gift_swapmove.h
new file mode 100644
index 00000000..093508c1
--- /dev/null
+++ b/riscv/insns/gift_swapmove.h
@@ -0,0 +1,8 @@
+if( xlen == 32 ) {
+  uint32_t x   = READ_REG( insn.rs1() );
+  uint32_t m   = READ_REG( insn.rs2() );
+
+  uint32_t r   = SWAPMOVE32( x, m, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..aa1f8ca5 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwise
+riscv_insn_lwise = gift_swapmove gift_rori_n gift_rori_b gift_rori_h gift_key_reorg gift_key_updstd gift_key_updfix
+# -- lwise
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
