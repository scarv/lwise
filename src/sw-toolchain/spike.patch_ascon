diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..fe88106f
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,6 @@
+#include "arith.h"
+
+// ++ lwise
+int ROT_0[] = { 19, 61,  1, 10,  7 };
+int ROT_1[] = { 28, 39,  6, 17, 41 };
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..5ccf5b7f 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,18 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint64_t ROL64( uint64_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 64 - n ) ) );
+}
+inline uint64_t ROR64( uint64_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 64 - n ) ) );
+}
+
+extern int ROT_0[];
+extern int ROT_1[];
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..8437b36f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..f605e7f9 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,18 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_ASCON_RORI_LO  0x0000700B
+#define  MASK_ASCON_RORI_LO  0xC000707F
+#define MATCH_ASCON_RORI_HI  0x4000700B
+#define  MASK_ASCON_RORI_HI  0xC000707F
+#define MATCH_ASCON_SIGMA_LO 0x0000702B
+#define  MASK_ASCON_SIGMA_LO 0xC000707F
+#define MATCH_ASCON_SIGMA_HI 0x4000702B
+#define  MASK_ASCON_SIGMA_HI 0xC000707F
+#define MATCH_ASCON_SIGMA    0x8000602B
+#define  MASK_ASCON_SIGMA    0xC000707F
+// -- lwise 
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3104,13 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(ascon_rori_lo,  MATCH_ASCON_RORI_LO,  MASK_ASCON_RORI_LO)
+DECLARE_INSN(ascon_rori_hi,  MATCH_ASCON_RORI_HI,  MASK_ASCON_RORI_HI)
+DECLARE_INSN(ascon_sigma_lo, MATCH_ASCON_SIGMA_LO, MASK_ASCON_SIGMA_LO)
+DECLARE_INSN(ascon_sigma_hi, MATCH_ASCON_SIGMA_HI, MASK_ASCON_SIGMA_HI)
+DECLARE_INSN(ascon_sigma,    MATCH_ASCON_SIGMA,    MASK_ASCON_SIGMA)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/ascon_rori_hi.h b/riscv/insns/ascon_rori_hi.h
new file mode 100644
index 00000000..f807c5e8
--- /dev/null
+++ b/riscv/insns/ascon_rori_hi.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ROR64( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), ( r >> 32 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/insns/ascon_rori_lo.h b/riscv/insns/ascon_rori_lo.h
new file mode 100644
index 00000000..1b032d24
--- /dev/null
+++ b/riscv/insns/ascon_rori_lo.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ROR64( x, insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), ( r >>  0 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/insns/ascon_sigma.h b/riscv/insns/ascon_sigma.h
new file mode 100644
index 00000000..9f9ad871
--- /dev/null
+++ b/riscv/insns/ascon_sigma.h
@@ -0,0 +1,8 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+
+  uint64_t r    = x ^ ROR64( x, ROT_0[ insn.funct7() & 0x1F ] ) ^
+                      ROR64( x, ROT_1[ insn.funct7() & 0x1F ] ) ;
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/ascon_sigma_hi.h b/riscv/insns/ascon_sigma_hi.h
new file mode 100644
index 00000000..2dd87b1e
--- /dev/null
+++ b/riscv/insns/ascon_sigma_hi.h
@@ -0,0 +1,11 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = x ^ ROR64( x, ROT_0[ insn.funct7() & 0x1F ] ) ^
+                      ROR64( x, ROT_1[ insn.funct7() & 0x1F ] ) ;
+
+  WRITE_REG( insn.rd(), ( r >> 32 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/insns/ascon_sigma_lo.h b/riscv/insns/ascon_sigma_lo.h
new file mode 100644
index 00000000..14676121
--- /dev/null
+++ b/riscv/insns/ascon_sigma_lo.h
@@ -0,0 +1,11 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs2() );
+  uint32_t x_lo = READ_REG( insn.rs1() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) | 
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = x ^ ROR64( x, ROT_0[ insn.funct7() & 0x1F ] ) ^
+                      ROR64( x, ROT_1[ insn.funct7() & 0x1F ] ) ;
+
+  WRITE_REG( insn.rd(), ( r >>  0 ) & 0xFFFFFFFF );
+}
diff --git a/riscv/insns/pack.h b/riscv/insns/pack.h
index 2b09e7ed..bb22147f 100644
--- a/riscv/insns/pack.h
+++ b/riscv/insns/pack.h
@@ -2,7 +2,7 @@
 require(((xlen == 32) && (insn.rs2() == 0) && p->extension_enabled(EXT_ZBB))
   || p->extension_enabled(EXT_ZBKB)
   || p->extension_enabled(EXT_XBITMANIP));
-require(SHAMT < (xlen/2));
+//require(SHAMT < (xlen/2));
 reg_t lo = zext_xlen(RS1 << (xlen/2)) >> (xlen/2);
 reg_t hi = zext_xlen(RS2 << (xlen/2));
 WRITE_RD(sext_xlen(lo | hi));
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..6be9045a 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwise
+riscv_insn_lwise = ascon_rori_hi ascon_rori_lo ascon_sigma ascon_sigma_hi ascon_sigma_lo
+# -- lwise
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
