diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..a8cc5986
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,19 @@
+#include "arith.h"
+
+// ++ lwise
+uint8_t M[ 8 ][ 8 ] = {
+  { 0x2, 0x4, 0x2, 0xB, 0x2, 0x8, 0x5, 0x6 },
+  { 0xC, 0x9, 0x8, 0xD, 0x7, 0x7, 0x5, 0x2 },
+  { 0x4, 0x4, 0xD, 0xD, 0x9, 0x4, 0xD, 0x9 },
+  { 0x1, 0x6, 0x5, 0x1, 0xC, 0xD, 0xF, 0xE },
+  { 0xF, 0xC, 0x9, 0xD, 0xE, 0x5, 0xE, 0xD },
+  { 0x9, 0xE, 0x5, 0xF, 0x4, 0xC, 0x9, 0x6 },
+  { 0xC, 0x2, 0x2, 0xA, 0x3, 0x1, 0x1, 0xE },
+  { 0xF, 0x1, 0xD, 0xA, 0x5, 0xA, 0x2, 0x3 },
+};
+
+uint8_t SBOX[ 16 ] = {
+  0xC, 0x5, 0x6, 0xB, 0x9, 0x0, 0xA, 0xD, 
+  0x3, 0xE, 0xF, 0x8, 0x4, 0x7, 0x1, 0x2
+};
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..2a6db47a 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,29 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint8_t GF2N_MUL( uint8_t x, uint8_t y ) {
+  uint8_t t = 0;
+
+  for( int i = 3; i >= 0; i-- ) {
+    t = t << 1;
+
+    if( ( t >> 4 ) & 1 ) {
+      t = t ^ 0x13;
+    }
+
+    if( ( y >> i ) & 1 ) {
+      t = t ^    x;
+    }
+  }
+
+  return t;
+}
+
+extern uint8_t M[ 8 ][ 8 ];
+extern uint8_t SBOX[ 16 ];
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..a00ae7c5 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise 
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..68360c7c 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,10 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_PHOTON_STEP 0x0000705B
+#define  MASK_PHOTON_STEP 0xF000707F
+// -- lwise
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3096,9 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(photon_step, MATCH_PHOTON_STEP, MASK_PHOTON_STEP)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/pack.h b/riscv/insns/pack.h
index 2b09e7ed..bb22147f 100644
--- a/riscv/insns/pack.h
+++ b/riscv/insns/pack.h
@@ -2,7 +2,7 @@
 require(((xlen == 32) && (insn.rs2() == 0) && p->extension_enabled(EXT_ZBB))
   || p->extension_enabled(EXT_ZBKB)
   || p->extension_enabled(EXT_XBITMANIP));
-require(SHAMT < (xlen/2));
+//require(SHAMT < (xlen/2));
 reg_t lo = zext_xlen(RS1 << (xlen/2)) >> (xlen/2);
 reg_t hi = zext_xlen(RS2 << (xlen/2));
 WRITE_RD(sext_xlen(lo | hi));
diff --git a/riscv/insns/photon_step.h b/riscv/insns/photon_step.h
new file mode 100644
index 00000000..45fbccf1
--- /dev/null
+++ b/riscv/insns/photon_step.h
@@ -0,0 +1,16 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint32_t t    = SBOX[ ( y >> ( 4 * imm ) ) & 0xF ];
+  uint32_t r    = 0;
+
+  for( int i = 0; i < 8; i++ ) {
+    r = r | ( ( uint32_t )( GF2N_MUL( M[ i ][ imm ], t ) ) << ( 4 * i ) );
+  }
+
+  r = r ^ x;
+
+  WRITE_REG( insn.rd(), r ); 
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..f00266d9 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwise
+riscv_insn_lwise = photon_step
+# -- lwise
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
