diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 00000000..27188e21
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,4 @@
+#include "arith.h"
+
+// ++ lwise
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f74..6cb18539 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,9 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..8437b36f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..e2421918 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,26 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_GRAIN_EXTR 0x0000700B
+#define  MASK_GRAIN_EXTR 0xC000707F
+#define MATCH_GRAIN_FLN2 0x0000702B
+#define  MASK_GRAIN_FLN2 0xE000707F
+#define MATCH_GRAIN_GNN0 0x2000702B
+#define  MASK_GRAIN_GNN0 0xE000707F
+#define MATCH_GRAIN_GNN1 0x4000702B
+#define  MASK_GRAIN_GNN1 0xE000707F
+#define MATCH_GRAIN_GNN2 0x6000702B
+#define  MASK_GRAIN_GNN2 0xE000707F
+#define MATCH_GRAIN_ONN0 0x8000702B
+#define  MASK_GRAIN_ONN0 0xE000707F
+#define MATCH_GRAIN_ONN1 0xA000702B
+#define  MASK_GRAIN_ONN1 0xE000707F
+#define MATCH_GRAIN_ONN2 0xC000702B
+#define  MASK_GRAIN_ONN2 0xE000707F
+#define MATCH_GRAIN_OLN0 0xE000702B
+#define  MASK_GRAIN_OLN0 0xE000707F
+// -- lwise
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3112,17 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(grain_extr, MATCH_GRAIN_EXTR, MASK_GRAIN_EXTR)
+DECLARE_INSN(grain_fln2, MATCH_GRAIN_FLN2, MASK_GRAIN_FLN2)
+DECLARE_INSN(grain_gnn0, MATCH_GRAIN_GNN0, MASK_GRAIN_GNN0)
+DECLARE_INSN(grain_gnn1, MATCH_GRAIN_GNN1, MASK_GRAIN_GNN1)
+DECLARE_INSN(grain_gnn2, MATCH_GRAIN_GNN2, MASK_GRAIN_GNN2)
+DECLARE_INSN(grain_onn0, MATCH_GRAIN_ONN0, MASK_GRAIN_ONN0)
+DECLARE_INSN(grain_onn1, MATCH_GRAIN_ONN1, MASK_GRAIN_ONN1)
+DECLARE_INSN(grain_onn2, MATCH_GRAIN_ONN2, MASK_GRAIN_ONN2)
+DECLARE_INSN(grain_oln0, MATCH_GRAIN_OLN0, MASK_GRAIN_OLN0)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/grain_extr.h b/riscv/insns/grain_extr.h
new file mode 100644
index 00000000..fef416f9
--- /dev/null
+++ b/riscv/insns/grain_extr.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = x >> ( insn.funct7() & 0x1F );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_fln2.h b/riscv/insns/grain_fln2.h
new file mode 100644
index 00000000..15ba5aca
--- /dev/null
+++ b/riscv/insns/grain_fln2.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( x >> 6 ) ^ ( x >> 17 );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_gnn0.h b/riscv/insns/grain_gnn0.h
new file mode 100644
index 00000000..2794773a
--- /dev/null
+++ b/riscv/insns/grain_gnn0.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( x ) ^ ( x >> 26 ) ^ ( ( x >> 11 ) & ( x >> 13 ) ) ^ ( ( x >> 17 ) & ( x >> 18 ) ) ^ ( ( x >> 22 ) & ( x >> 24 ) & ( x >> 25 ) ); 
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_gnn1.h b/riscv/insns/grain_gnn1.h
new file mode 100644
index 00000000..adf48736
--- /dev/null
+++ b/riscv/insns/grain_gnn1.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( x >> 24 ) ^ ( ( x >> 8 ) & ( x >> 16 ) );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_gnn2.h b/riscv/insns/grain_gnn2.h
new file mode 100644
index 00000000..a69272cf
--- /dev/null
+++ b/riscv/insns/grain_gnn2.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( ( x >> 4 ) & ( x >> 20 ) ) ^ ( ( x >> 24 ) & ( x >> 28 ) & ( x >> 29 ) & ( x >> 31 ) ) ^ ( ( x >> 6 ) & ( x >> 14 ) & ( x >> 18 ) ) ^ ( x >> 27 );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_oln0.h b/riscv/insns/grain_oln0.h
new file mode 100644
index 00000000..3a485546
--- /dev/null
+++ b/riscv/insns/grain_oln0.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( x >> 13 ) & ( x >> 20 );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_onn0.h b/riscv/insns/grain_onn0.h
new file mode 100644
index 00000000..e11519d9
--- /dev/null
+++ b/riscv/insns/grain_onn0.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( x >> 2 ) ^ ( x >> 15 );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_onn1.h b/riscv/insns/grain_onn1.h
new file mode 100644
index 00000000..e30e4af3
--- /dev/null
+++ b/riscv/insns/grain_onn1.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( x >> 4 ) ^ ( x >> 13 );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/grain_onn2.h b/riscv/insns/grain_onn2.h
new file mode 100644
index 00000000..c612003b
--- /dev/null
+++ b/riscv/insns/grain_onn2.h
@@ -0,0 +1,10 @@
+if( xlen == 32 ) {
+  uint32_t x_hi = READ_REG( insn.rs1() );
+  uint32_t x_lo = READ_REG( insn.rs2() );
+  uint64_t x    = ( ( uint64_t )( x_hi ) << 32 ) |
+                  ( ( uint64_t )( x_lo ) <<  0 ) ;
+
+  uint64_t r    = ( x ) ^ ( x >> 9 ) ^ ( x >> 25 );
+
+  WRITE_REG( insn.rd(), ( uint32_t )( r ) );
+}
diff --git a/riscv/insns/pack.h b/riscv/insns/pack.h
index 2b09e7ed..bb22147f 100644
--- a/riscv/insns/pack.h
+++ b/riscv/insns/pack.h
@@ -2,7 +2,7 @@
 require(((xlen == 32) && (insn.rs2() == 0) && p->extension_enabled(EXT_ZBB))
   || p->extension_enabled(EXT_ZBKB)
   || p->extension_enabled(EXT_XBITMANIP));
-require(SHAMT < (xlen/2));
+//require(SHAMT < (xlen/2));
 reg_t lo = zext_xlen(RS1 << (xlen/2)) >> (xlen/2);
 reg_t hi = zext_xlen(RS2 << (xlen/2));
 WRITE_RD(sext_xlen(lo | hi));
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..65a908b4 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwise
+riscv_insn_lwise = grain_extr grain_fln2 grain_gnn0 grain_gnn1 grain_gnn2 grain_oln0 grain_onn0 grain_onn1 grain_onn2
+# -- lwise  
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
