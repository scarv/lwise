diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 0000000..fbd5714
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,8 @@
+#include "arith.h"
+
+// ++ lwise
+uint32_t RCON[] = { 0xB7E15162, 0xBF715880, 0x38B4DA56, 0x324E7738, 0xBB1185EB, 0x4F7C7B57, 0xCFBFA1C8, 0xC2B3293D };
+
+int ROT_0[] = { 31, 17,  0, 24 };
+int ROT_1[] = { 24, 17, 31, 16 };
+// -- lwise
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f7..33ee0ac 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,24 @@
 #include <climits>
 #include <cstddef>
 
+// ++ lwise
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+
+inline uint32_t ELL( uint32_t x ) {
+  return ROR32( x ^ ( x << 16 ), 16 );
+}
+
+extern uint32_t RCON[];
+
+extern int ROT_0[];
+extern int ROT_1[];
+// -- lwise
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c85..d4b5b6f 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ lwise
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- lwise
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b216296..6c6b4c3 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,78 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ lwise
+#define MATCH_SPARKLE_ADDRORI      0x0000702B
+#define  MASK_SPARKLE_ADDRORI      0xC000707F
+#define MATCH_SPARKLE_SUBRORI      0x4000702B
+#define  MASK_SPARKLE_SUBRORI      0xC000707F
+#define MATCH_SPARKLE_XORRORI      0x8000702B
+#define  MASK_SPARKLE_XORRORI      0xC000707F
+#define MATCH_SPARKLE_RCON         0x0000605B
+#define  MASK_SPARKLE_RCON         0xF000707F
+#define MATCH_SPARKLE_RCONW        0x1000605B
+#define  MASK_SPARKLE_RCONW        0xF000707F
+#define MATCH_SPARKLE_BLOCK_ENCI   0x4000705B
+#define  MASK_SPARKLE_BLOCK_ENCI   0xF000707F
+#define MATCH_SPARKLE_BLOCK_DECI   0x5000705B
+#define  MASK_SPARKLE_BLOCK_DECI   0xF000707F
+#define MATCH_SPARKLE_WHOLE_ENCI_X 0x8000705B
+#define  MASK_SPARKLE_WHOLE_ENCI_X 0xF000707F
+#define MATCH_SPARKLE_WHOLE_ENCI_Y 0x9000705B
+#define  MASK_SPARKLE_WHOLE_ENCI_Y 0xF000707F
+#define MATCH_SPARKLE_WHOLE_DECI_X 0xA000705B
+#define  MASK_SPARKLE_WHOLE_DECI_X 0xF000707F
+#define MATCH_SPARKLE_WHOLE_DECI_Y 0xB000705B
+#define  MASK_SPARKLE_WHOLE_DECI_Y 0xF000707F
+#define MATCH_SPARKLE_WHOLE_ENCI   0xC000605B
+#define  MASK_SPARKLE_WHOLE_ENCI   0xF000707F
+#define MATCH_SPARKLE_WHOLE_DECI   0xD000605B
+#define  MASK_SPARKLE_WHOLE_DECI   0xF000707F
+#define MATCH_SPARKLE_ELL          0x0400707B
+#define  MASK_SPARKLE_ELL          0xFE00707F
+#define MATCH_SPARKLE_ELLREV       0x0600707B
+#define  MASK_SPARKLE_ELLREV       0xFE00707F
+#define MATCH_SPARKLE_ADDROR_31    0x4000707B
+#define  MASK_SPARKLE_ADDROR_31    0xFE00707F
+#define MATCH_SPARKLE_ADDROR_17    0x4200707B
+#define  MASK_SPARKLE_ADDROR_17    0xFE00707F
+#define MATCH_SPARKLE_ADDROR_24    0x4400707B
+#define  MASK_SPARKLE_ADDROR_24    0xFE00707F
+#define MATCH_SPARKLE_SUBROR_31    0x4600707B
+#define  MASK_SPARKLE_SUBROR_31    0xFE00707F
+#define MATCH_SPARKLE_SUBROR_17    0x4800707B
+#define  MASK_SPARKLE_SUBROR_17    0xFE00707F
+#define MATCH_SPARKLE_SUBROR_24    0x4A00707B
+#define  MASK_SPARKLE_SUBROR_24    0xFE00707F
+#define MATCH_SPARKLE_XORROR_31    0x4C00707B
+#define  MASK_SPARKLE_XORROR_31    0xFE00707F
+#define MATCH_SPARKLE_XORROR_17    0x4E00707B
+#define  MASK_SPARKLE_XORROR_17    0xFE00707F
+#define MATCH_SPARKLE_XORROR_24    0x5000707B
+#define  MASK_SPARKLE_XORROR_24    0xFE00707F
+#define MATCH_SPARKLE_XORROR_16    0x5200707B
+#define  MASK_SPARKLE_XORROR_16    0xFE00707F
+#define MATCH_SPARKLE_BLOCK_ENC_0  0x8000707B
+#define  MASK_SPARKLE_BLOCK_ENC_0  0xFE00707F
+#define MATCH_SPARKLE_BLOCK_ENC_1  0x8200707B
+#define  MASK_SPARKLE_BLOCK_ENC_1  0xFE00707F
+#define MATCH_SPARKLE_BLOCK_ENC_2  0x8400707B
+#define  MASK_SPARKLE_BLOCK_ENC_2  0xFE00707F
+#define MATCH_SPARKLE_BLOCK_ENC_3  0x8600707B
+#define  MASK_SPARKLE_BLOCK_ENC_3  0xFE00707F
+#define MATCH_SPARKLE_BLOCK_DEC_0  0x8800707B
+#define  MASK_SPARKLE_BLOCK_DEC_0  0xFE00707F
+#define MATCH_SPARKLE_BLOCK_DEC_1  0x8A00707B
+#define  MASK_SPARKLE_BLOCK_DEC_1  0xFE00707F
+#define MATCH_SPARKLE_BLOCK_DEC_2  0x8C00707B
+#define  MASK_SPARKLE_BLOCK_DEC_2  0xFE00707F
+#define MATCH_SPARKLE_BLOCK_DEC_3  0x8E00707B
+#define  MASK_SPARKLE_BLOCK_DEC_3  0xFE00707F
+#define MATCH_SPARKLE_WHOLE_ENC    0xC000707B
+#define  MASK_SPARKLE_WHOLE_ENC    0xFE00707F
+#define MATCH_SPARKLE_WHOLE_DEC    0xC200707B
+#define  MASK_SPARKLE_WHOLE_DEC    0xFE00707F
+// -- lwise 
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3164,43 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ lwise
+DECLARE_INSN(sparkle_ell,          MATCH_SPARKLE_ELL,          MASK_SPARKLE_ELL)
+DECLARE_INSN(sparkle_ellrev,       MATCH_SPARKLE_ELLREV,       MASK_SPARKLE_ELLREV)
+DECLARE_INSN(sparkle_rcon,         MATCH_SPARKLE_RCON,         MASK_SPARKLE_RCON)
+DECLARE_INSN(sparkle_rconw,        MATCH_SPARKLE_RCONW,        MASK_SPARKLE_RCONW)
+DECLARE_INSN(sparkle_addrori,      MATCH_SPARKLE_ADDRORI,      MASK_SPARKLE_ADDRORI)
+DECLARE_INSN(sparkle_subrori,      MATCH_SPARKLE_SUBRORI,      MASK_SPARKLE_SUBRORI)
+DECLARE_INSN(sparkle_xorrori,      MATCH_SPARKLE_XORRORI,      MASK_SPARKLE_XORRORI)
+DECLARE_INSN(sparkle_addror_31,    MATCH_SPARKLE_ADDROR_31,    MASK_SPARKLE_ADDROR_31)
+DECLARE_INSN(sparkle_addror_17,    MATCH_SPARKLE_ADDROR_17,    MASK_SPARKLE_ADDROR_17)
+DECLARE_INSN(sparkle_addror_24,    MATCH_SPARKLE_ADDROR_24,    MASK_SPARKLE_ADDROR_24)
+DECLARE_INSN(sparkle_subror_31,    MATCH_SPARKLE_SUBROR_31,    MASK_SPARKLE_SUBROR_31)
+DECLARE_INSN(sparkle_subror_17,    MATCH_SPARKLE_SUBROR_17,    MASK_SPARKLE_SUBROR_17)
+DECLARE_INSN(sparkle_subror_24,    MATCH_SPARKLE_SUBROR_24,    MASK_SPARKLE_SUBROR_24)
+DECLARE_INSN(sparkle_xorror_31,    MATCH_SPARKLE_XORROR_31,    MASK_SPARKLE_XORROR_31)
+DECLARE_INSN(sparkle_xorror_17,    MATCH_SPARKLE_XORROR_17,    MASK_SPARKLE_XORROR_17)
+DECLARE_INSN(sparkle_xorror_24,    MATCH_SPARKLE_XORROR_24,    MASK_SPARKLE_XORROR_24)
+DECLARE_INSN(sparkle_xorror_16,    MATCH_SPARKLE_XORROR_16,    MASK_SPARKLE_XORROR_16)
+DECLARE_INSN(sparkle_whole_enci_x, MATCH_SPARKLE_WHOLE_ENCI_X, MASK_SPARKLE_WHOLE_ENCI_X)
+DECLARE_INSN(sparkle_whole_enci_y, MATCH_SPARKLE_WHOLE_ENCI_Y, MASK_SPARKLE_WHOLE_ENCI_Y)
+DECLARE_INSN(sparkle_whole_deci_x, MATCH_SPARKLE_WHOLE_DECI_X, MASK_SPARKLE_WHOLE_DECI_X)
+DECLARE_INSN(sparkle_whole_deci_y, MATCH_SPARKLE_WHOLE_DECI_Y, MASK_SPARKLE_WHOLE_DECI_Y)
+DECLARE_INSN(sparkle_block_enci,   MATCH_SPARKLE_BLOCK_ENCI,   MASK_SPARKLE_BLOCK_ENCI)
+DECLARE_INSN(sparkle_block_deci,   MATCH_SPARKLE_BLOCK_DECI,   MASK_SPARKLE_BLOCK_DECI)
+DECLARE_INSN(sparkle_block_enc_0,  MATCH_SPARKLE_BLOCK_ENC_0,  MASK_SPARKLE_BLOCK_ENC_0)
+DECLARE_INSN(sparkle_block_enc_1,  MATCH_SPARKLE_BLOCK_ENC_1,  MASK_SPARKLE_BLOCK_ENC_1)
+DECLARE_INSN(sparkle_block_enc_2,  MATCH_SPARKLE_BLOCK_ENC_2,  MASK_SPARKLE_BLOCK_ENC_2)
+DECLARE_INSN(sparkle_block_enc_3,  MATCH_SPARKLE_BLOCK_ENC_3,  MASK_SPARKLE_BLOCK_ENC_3)
+DECLARE_INSN(sparkle_block_dec_0,  MATCH_SPARKLE_BLOCK_DEC_0,  MASK_SPARKLE_BLOCK_DEC_0)
+DECLARE_INSN(sparkle_block_dec_1,  MATCH_SPARKLE_BLOCK_DEC_1,  MASK_SPARKLE_BLOCK_DEC_1)
+DECLARE_INSN(sparkle_block_dec_2,  MATCH_SPARKLE_BLOCK_DEC_2,  MASK_SPARKLE_BLOCK_DEC_2)
+DECLARE_INSN(sparkle_block_dec_3,  MATCH_SPARKLE_BLOCK_DEC_3,  MASK_SPARKLE_BLOCK_DEC_3)
+DECLARE_INSN(sparkle_whole_enci,   MATCH_SPARKLE_WHOLE_ENCI,   MASK_SPARKLE_WHOLE_ENCI)
+DECLARE_INSN(sparkle_whole_deci,   MATCH_SPARKLE_WHOLE_DECI,   MASK_SPARKLE_WHOLE_DECI)
+DECLARE_INSN(sparkle_whole_enc,    MATCH_SPARKLE_WHOLE_ENC,    MASK_SPARKLE_WHOLE_ENC)
+DECLARE_INSN(sparkle_whole_dec,    MATCH_SPARKLE_WHOLE_DEC,    MASK_SPARKLE_WHOLE_DEC)
+// -- lwise
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/sparkle_addror_17.h b/riscv/insns/sparkle_addror_17.h
new file mode 100644
index 0000000..9eab086
--- /dev/null
+++ b/riscv/insns/sparkle_addror_17.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, 17 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_addror_24.h b/riscv/insns/sparkle_addror_24.h
new file mode 100644
index 0000000..fb2b95b
--- /dev/null
+++ b/riscv/insns/sparkle_addror_24.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, 24 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_addror_31.h b/riscv/insns/sparkle_addror_31.h
new file mode 100644
index 0000000..512f713
--- /dev/null
+++ b/riscv/insns/sparkle_addror_31.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, 31 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_addrori.h b/riscv/insns/sparkle_addrori.h
new file mode 100644
index 0000000..65a0818
--- /dev/null
+++ b/riscv/insns/sparkle_addrori.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x + ROR32( y, insn.funct7() & 0x1F );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_dec_0.h b/riscv/insns/sparkle_block_dec_0.h
new file mode 100644
index 0000000..0915960
--- /dev/null
+++ b/riscv/insns/sparkle_block_dec_0.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_dec_1.h b/riscv/insns/sparkle_block_dec_1.h
new file mode 100644
index 0000000..ab69e69
--- /dev/null
+++ b/riscv/insns/sparkle_block_dec_1.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_dec_2.h b/riscv/insns/sparkle_block_dec_2.h
new file mode 100644
index 0000000..8eafcec
--- /dev/null
+++ b/riscv/insns/sparkle_block_dec_2.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_dec_3.h b/riscv/insns/sparkle_block_dec_3.h
new file mode 100644
index 0000000..375aeac
--- /dev/null
+++ b/riscv/insns/sparkle_block_dec_3.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_deci.h b/riscv/insns/sparkle_block_deci.h
new file mode 100644
index 0000000..97114ea
--- /dev/null
+++ b/riscv/insns/sparkle_block_deci.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, ROT_1[ insn.funct7() & 0x3 ] );
+         xi = xi - ROR32( yi, ROT_0[ insn.funct7() & 0x3 ] );
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_enc_0.h b/riscv/insns/sparkle_block_enc_0.h
new file mode 100644
index 0000000..9d90c3a
--- /dev/null
+++ b/riscv/insns/sparkle_block_enc_0.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_enc_1.h b/riscv/insns/sparkle_block_enc_1.h
new file mode 100644
index 0000000..8d0004b
--- /dev/null
+++ b/riscv/insns/sparkle_block_enc_1.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_enc_2.h b/riscv/insns/sparkle_block_enc_2.h
new file mode 100644
index 0000000..05fa865
--- /dev/null
+++ b/riscv/insns/sparkle_block_enc_2.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_enc_3.h b/riscv/insns/sparkle_block_enc_3.h
new file mode 100644
index 0000000..57274e7
--- /dev/null
+++ b/riscv/insns/sparkle_block_enc_3.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_block_enci.h b/riscv/insns/sparkle_block_enci.h
new file mode 100644
index 0000000..873c1c9
--- /dev/null
+++ b/riscv/insns/sparkle_block_enci.h
@@ -0,0 +1,12 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, ROT_0[ insn.funct7() & 0x3 ] );
+         yi = yi ^ ROR32( xi, ROT_1[ insn.funct7() & 0x3 ] );
+         xi = xi ^        ci;
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) |
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_ell.h b/riscv/insns/sparkle_ell.h
new file mode 100644
index 0000000..5815b14
--- /dev/null
+++ b/riscv/insns/sparkle_ell.h
@@ -0,0 +1,23 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t y    = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r    = ELL( x    ^ y    );
+
+  WRITE_REG( insn.rd(), r );
+}
+else if( xlen == 64 ) {
+  uint32_t x_hi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t y_hi = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t y_lo = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_hi = ELL( x_hi ^ y_hi );
+  uint32_t r_lo = ELL( x_lo ^ y_lo );
+
+  uint64_t r    = ( ( uint64_t )( r_hi ) << 32 ) | 
+                  ( ( uint64_t )( r_lo ) <<  0 ) ;
+
+  WRITE_REG( insn.rd(), r );
+}
+
diff --git a/riscv/insns/sparkle_ellrev.h b/riscv/insns/sparkle_ellrev.h
new file mode 100644
index 0000000..48e219e
--- /dev/null
+++ b/riscv/insns/sparkle_ellrev.h
@@ -0,0 +1,15 @@
+if( xlen == 64 ) {
+  uint32_t x_hi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+  uint32_t y_hi = ( READ_REG( insn.rs2() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t y_lo = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_hi = ELL( x_hi ^ y_hi );
+  uint32_t r_lo = ELL( x_lo ^ y_lo );
+
+  uint64_t r    = ( ( uint64_t )( r_hi ) <<  0 ) | 
+                  ( ( uint64_t )( r_lo ) << 32 ) ;
+
+  WRITE_REG( insn.rd(), r );
+}
+
diff --git a/riscv/insns/sparkle_rcon.h b/riscv/insns/sparkle_rcon.h
new file mode 100644
index 0000000..4dbb52e
--- /dev/null
+++ b/riscv/insns/sparkle_rcon.h
@@ -0,0 +1,19 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r    = x    ^ RCON[ insn.funct7() & 0x7 ];
+
+  WRITE_REG( insn.rd(), r );
+}
+else if( xlen == 64 ) {
+  uint32_t x_hi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+  uint32_t x_lo = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r_hi = x_hi ^ RCON[ insn.funct7() & 0x7 ];
+  uint32_t r_lo = x_lo ^ RCON[ insn.funct7() & 0x7 ];
+
+  uint64_t r    = ( ( uint64_t )( r_hi ) << 32 ) |
+                  ( ( uint64_t )( r_lo ) <<  0 ) ;
+                  
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/sparkle_rconw.h b/riscv/insns/sparkle_rconw.h
new file mode 100644
index 0000000..7c315c4
--- /dev/null
+++ b/riscv/insns/sparkle_rconw.h
@@ -0,0 +1,7 @@
+if( xlen == 64 ) {
+  uint32_t x    = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+
+  uint32_t r    = x    ^ RCON[ insn.funct7() & 0x7 ];
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/sparkle_subror_17.h b/riscv/insns/sparkle_subror_17.h
new file mode 100644
index 0000000..6b82f7f
--- /dev/null
+++ b/riscv/insns/sparkle_subror_17.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, 17 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_subror_24.h b/riscv/insns/sparkle_subror_24.h
new file mode 100644
index 0000000..a737d0a
--- /dev/null
+++ b/riscv/insns/sparkle_subror_24.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, 24 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_subror_31.h b/riscv/insns/sparkle_subror_31.h
new file mode 100644
index 0000000..d6d2739
--- /dev/null
+++ b/riscv/insns/sparkle_subror_31.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, 31 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_subrori.h b/riscv/insns/sparkle_subrori.h
new file mode 100644
index 0000000..2e2eb0c
--- /dev/null
+++ b/riscv/insns/sparkle_subrori.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x - ROR32( y, insn.funct7() & 0x1F );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_whole_dec.h b/riscv/insns/sparkle_whole_dec.h
new file mode 100644
index 0000000..0b0d781
--- /dev/null
+++ b/riscv/insns/sparkle_whole_dec.h
@@ -0,0 +1,21 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) | 
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_whole_deci.h b/riscv/insns/sparkle_whole_deci.h
new file mode 100644
index 0000000..a023f80
--- /dev/null
+++ b/riscv/insns/sparkle_whole_deci.h
@@ -0,0 +1,21 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) | 
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_whole_deci_x.h b/riscv/insns/sparkle_whole_deci_x.h
new file mode 100644
index 0000000..bc52850
--- /dev/null
+++ b/riscv/insns/sparkle_whole_deci_x.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+WRITE_REG( insn.rd(), xi );
diff --git a/riscv/insns/sparkle_whole_deci_y.h b/riscv/insns/sparkle_whole_deci_y.h
new file mode 100644
index 0000000..f502bc7
--- /dev/null
+++ b/riscv/insns/sparkle_whole_deci_y.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi - ROR32( yi, 24 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi - ROR32( yi,  0 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi - ROR32( yi, 17 );
+         xi = xi ^        ci;
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi - ROR32( yi, 31 );
+
+WRITE_REG( insn.rd(), yi );
diff --git a/riscv/insns/sparkle_whole_enc.h b/riscv/insns/sparkle_whole_enc.h
new file mode 100644
index 0000000..f586ea2
--- /dev/null
+++ b/riscv/insns/sparkle_whole_enc.h
@@ -0,0 +1,21 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = ( READ_REG( insn.rs2() ) >>  0 ) & 0xFFFFFFFF;
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) | 
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_whole_enci.h b/riscv/insns/sparkle_whole_enci.h
new file mode 100644
index 0000000..8be2915
--- /dev/null
+++ b/riscv/insns/sparkle_whole_enci.h
@@ -0,0 +1,21 @@
+uint32_t xi = ( READ_REG( insn.rs1() ) >>  0 ) & 0xFFFFFFFF;
+uint32_t yi = ( READ_REG( insn.rs1() ) >> 32 ) & 0xFFFFFFFF;
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+uint64_t r  = ( ( uint64_t )( yi ) << 32 ) | 
+              ( ( uint64_t )( xi ) <<  0 ) ;
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_whole_enci_x.h b/riscv/insns/sparkle_whole_enci_x.h
new file mode 100644
index 0000000..689b632
--- /dev/null
+++ b/riscv/insns/sparkle_whole_enci_x.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), xi );
diff --git a/riscv/insns/sparkle_whole_enci_y.h b/riscv/insns/sparkle_whole_enci_y.h
new file mode 100644
index 0000000..5e4df3e
--- /dev/null
+++ b/riscv/insns/sparkle_whole_enci_y.h
@@ -0,0 +1,18 @@
+uint32_t xi = READ_REG( insn.rs1() );
+uint32_t yi = READ_REG( insn.rs2() );
+uint32_t ci = RCON[ insn.funct7() & 0x7 ];
+
+         xi = xi + ROR32( yi, 31 );
+         yi = yi ^ ROR32( xi, 24 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 17 );
+         yi = yi ^ ROR32( xi, 17 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi,  0 );
+         yi = yi ^ ROR32( xi, 31 );
+         xi = xi ^        ci;
+         xi = xi + ROR32( yi, 24 );
+         yi = yi ^ ROR32( xi, 16 );
+         xi = xi ^        ci;
+
+WRITE_REG( insn.rd(), yi );
diff --git a/riscv/insns/sparkle_xorror_16.h b/riscv/insns/sparkle_xorror_16.h
new file mode 100644
index 0000000..77d62b9
--- /dev/null
+++ b/riscv/insns/sparkle_xorror_16.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 16 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_xorror_17.h b/riscv/insns/sparkle_xorror_17.h
new file mode 100644
index 0000000..dbd7d67
--- /dev/null
+++ b/riscv/insns/sparkle_xorror_17.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 17 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_xorror_24.h b/riscv/insns/sparkle_xorror_24.h
new file mode 100644
index 0000000..45e0ae2
--- /dev/null
+++ b/riscv/insns/sparkle_xorror_24.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 24 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_xorror_31.h b/riscv/insns/sparkle_xorror_31.h
new file mode 100644
index 0000000..073fa11
--- /dev/null
+++ b/riscv/insns/sparkle_xorror_31.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, 31 );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/insns/sparkle_xorrori.h b/riscv/insns/sparkle_xorrori.h
new file mode 100644
index 0000000..b4827c0
--- /dev/null
+++ b/riscv/insns/sparkle_xorrori.h
@@ -0,0 +1,6 @@
+uint32_t x = READ_REG( insn.rs1() );
+uint32_t y = READ_REG( insn.rs2() );
+
+uint32_t r = x ^ ROR32( y, insn.funct7() & 0x1F );
+
+WRITE_REG( insn.rd(), r );
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118..af6b208 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ lwise
+riscv_insn_lwise = sparkle_addror_17 sparkle_addror_24 sparkle_addror_31 sparkle_addrori sparkle_block_dec_0 sparkle_block_dec_1 sparkle_block_dec_2 sparkle_block_dec_3 sparkle_block_deci sparkle_ell sparkle_ellrev sparkle_block_enc_0 sparkle_block_enc_1 sparkle_block_enc_2 sparkle_block_enc_3 sparkle_block_enci sparkle_rcon sparkle_rconw sparkle_subror_17 sparkle_subror_24 sparkle_subror_31 sparkle_subrori sparkle_whole_dec sparkle_whole_deci sparkle_whole_deci_x sparkle_whole_deci_y sparkle_whole_enc sparkle_whole_enci sparkle_whole_enci_x sparkle_whole_enci_y sparkle_xorror_16 sparkle_xorror_17 sparkle_xorror_24 sparkle_xorror_31 sparkle_xorrori
+# -- lwise 
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_lwise) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
