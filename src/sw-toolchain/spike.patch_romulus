diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 0000000..aab322a
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,22 @@
+#include "arith.h"
+
+// ++ romulus
+uint8_t SBOX[] = {
+  0x65, 0x4C, 0x6A, 0x42, 0x4B, 0x63, 0x43, 0x6B, 0x55, 0x75, 0x5A, 0x7A, 0x53, 0x73, 0x5B, 0x7B,
+  0x35, 0x8C, 0x3A, 0x81, 0x89, 0x33, 0x80, 0x3B, 0x95, 0x25, 0x98, 0x2A, 0x90, 0x23, 0x99, 0x2B,
+  0xE5, 0xCC, 0xE8, 0xC1, 0xC9, 0xE0, 0xC0, 0xE9, 0xD5, 0xF5, 0xD8, 0xF8, 0xD0, 0xF0, 0xD9, 0xF9,
+  0xA5, 0x1C, 0xA8, 0x12, 0x1B, 0xA0, 0x13, 0xA9, 0x05, 0xB5, 0x0A, 0xB8, 0x03, 0xB0, 0x0B, 0xB9,
+  0x32, 0x88, 0x3C, 0x85, 0x8D, 0x34, 0x84, 0x3D, 0x91, 0x22, 0x9C, 0x2C, 0x94, 0x24, 0x9D, 0x2D,
+  0x62, 0x4A, 0x6C, 0x45, 0x4D, 0x64, 0x44, 0x6D, 0x52, 0x72, 0x5C, 0x7C, 0x54, 0x74, 0x5D, 0x7D,
+  0xA1, 0x1A, 0xAC, 0x15, 0x1D, 0xA4, 0x14, 0xAD, 0x02, 0xB1, 0x0C, 0xBC, 0x04, 0xB4, 0x0D, 0xBD,
+  0xE1, 0xC8, 0xEC, 0xC5, 0xCD, 0xE4, 0xC4, 0xED, 0xD1, 0xF1, 0xDC, 0xFC, 0xD4, 0xF4, 0xDD, 0xFD,
+  0x36, 0x8E, 0x38, 0x82, 0x8B, 0x30, 0x83, 0x39, 0x96, 0x26, 0x9A, 0x28, 0x93, 0x20, 0x9B, 0x29,
+  0x66, 0x4E, 0x68, 0x41, 0x49, 0x60, 0x40, 0x69, 0x56, 0x76, 0x58, 0x78, 0x50, 0x70, 0x59, 0x79,
+  0xA6, 0x1E, 0xAA, 0x11, 0x19, 0xA3, 0x10, 0xAB, 0x06, 0xB6, 0x08, 0xBA, 0x00, 0xB3, 0x09, 0xBB,
+  0xE6, 0xCE, 0xEA, 0xC2, 0xCB, 0xE3, 0xC3, 0xEB, 0xD6, 0xF6, 0xDA, 0xFA, 0xD3, 0xF3, 0xDB, 0xFB,
+  0x31, 0x8A, 0x3E, 0x86, 0x8F, 0x37, 0x87, 0x3F, 0x92, 0x21, 0x9E, 0x2E, 0x97, 0x27, 0x9F, 0x2F,
+  0x61, 0x48, 0x6E, 0x46, 0x4F, 0x67, 0x47, 0x6F, 0x51, 0x71, 0x5E, 0x7E, 0x57, 0x77, 0x5F, 0x7F,
+  0xA2, 0x18, 0xAE, 0x16, 0x1F, 0xA7, 0x17, 0xAF, 0x01, 0xB2, 0x0E, 0xBE, 0x07, 0xB7, 0x0F, 0xBF,
+  0xE2, 0xCA, 0xEE, 0xC6, 0xCF, 0xE7, 0xC7, 0xEF, 0xD2, 0xF2, 0xDE, 0xFE, 0xD7, 0xF7, 0xDF, 0xFF
+};
+// -- romulus
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f7..1d4db0c 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,39 @@
 #include <climits>
 #include <cstddef>
 
+// ++ romulus
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+
+inline uint8_t LFSR_RC ( uint8_t x ) {
+  uint32_t t = ( ( x >> 5 ) & 0x1 ) ^
+               ( ( x >> 4 ) & 0x1 ) ^
+               (              0x1 ) ;
+
+  return ( ( x << 1 ) | t ) & 0x3F;
+}
+
+inline uint8_t LFSR_TK2( uint8_t x ) {
+  uint8_t t = ( ( x >> 7 ) & 0x01 ) ^
+              ( ( x >> 5 ) & 0x01 ) ;
+
+  return ( ( x << 1 ) | t ) & 0xFF;
+}
+
+inline uint8_t LFSR_TK3( uint8_t x ) {
+  uint8_t t = ( ( x << 7 ) & 0x80 ) ^
+              ( ( x << 1 ) & 0x80 ) ;
+
+  return ( ( x >> 1 ) | t ) & 0xFF;
+}
+
+extern uint8_t SBOX[];
+// -- romulus
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c85..ab3ddd6 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ romulus
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }  
+  // -- romulus
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b216296..6616bf8 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,26 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ romulus
+#define MATCH_ROMULUS_RC_UPD   0x0000600B
+#define  MASK_ROMULUS_RC_UPD   0xC000707F
+#define MATCH_ROMULUS_RC_USE_0 0x4000700B
+#define  MASK_ROMULUS_RC_USE_0 0xC000707F
+#define MATCH_ROMULUS_RC_USE_1 0x8000700B
+#define  MASK_ROMULUS_RC_USE_1 0xC000707F
+#define MATCH_ROMULUS_RC_USE   0xC000700B
+#define  MASK_ROMULUS_RC_USE   0xC000707F
+#define MATCH_ROMULUS_TK_UPD_0 0x0000702B
+#define  MASK_ROMULUS_TK_UPD_0 0xC000707F
+#define MATCH_ROMULUS_TK_UPD_1 0x4000702B
+#define  MASK_ROMULUS_TK_UPD_1 0xC000707F
+#define MATCH_ROMULUS_TK_UPD   0x8000602B
+#define  MASK_ROMULUS_TK_UPD   0xC000707F
+#define MATCH_ROMULUS_RSTEP    0x0000705B
+#define  MASK_ROMULUS_RSTEP    0xC000707F
+#define MATCH_ROMULUS_CSTEP    0x4000705B
+#define  MASK_ROMULUS_CSTEP    0xC000707F
+// -- romulus
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3112,17 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ romulus
+DECLARE_INSN(romulus_rc_upd,   MATCH_ROMULUS_RC_UPD,   MASK_ROMULUS_RC_UPD)
+DECLARE_INSN(romulus_rc_use_0, MATCH_ROMULUS_RC_USE_0, MASK_ROMULUS_RC_USE_0)
+DECLARE_INSN(romulus_rc_use_1, MATCH_ROMULUS_RC_USE_1, MASK_ROMULUS_RC_USE_1)
+DECLARE_INSN(romulus_rc_use,   MATCH_ROMULUS_RC_USE,   MASK_ROMULUS_RC_USE)
+DECLARE_INSN(romulus_tk_upd_0, MATCH_ROMULUS_TK_UPD_0, MASK_ROMULUS_TK_UPD_0)
+DECLARE_INSN(romulus_tk_upd_1, MATCH_ROMULUS_TK_UPD_1, MASK_ROMULUS_TK_UPD_1)
+DECLARE_INSN(romulus_tk_upd,   MATCH_ROMULUS_TK_UPD,   MASK_ROMULUS_TK_UPD)
+DECLARE_INSN(romulus_rstep,    MATCH_ROMULUS_RSTEP,    MASK_ROMULUS_RSTEP)
+DECLARE_INSN(romulus_cstep,    MATCH_ROMULUS_CSTEP,    MASK_ROMULUS_CSTEP)
+// -- romulus
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/romulus_cstep.h b/riscv/insns/romulus_cstep.h
new file mode 100644
index 0000000..13ef0c3
--- /dev/null
+++ b/riscv/insns/romulus_cstep.h
@@ -0,0 +1,71 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint64_t imm  = insn.funct7() & 0x1F;
+
+  uint32_t t_0  = ( ( ( x >>  0 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 32 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >>  0 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 32 ) & 0xFF ) << 24 ) ;
+  uint32_t t_1  = ( ( ( x >>  8 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 40 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >>  8 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 40 ) & 0xFF ) << 24 ) ;
+  uint32_t t_2  = ( ( ( x >> 16 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 48 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >> 16 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 48 ) & 0xFF ) << 24 ) ;
+  uint32_t t_3  = ( ( ( x >> 24 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 56 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >> 24 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 56 ) & 0xFF ) << 24 ) ;
+
+  #define MIX_0(x) ( uint32_t )( ( (x) >>  0 ) & 0xFF )
+  #define MIX_1(x) ( uint32_t )( ( (x) >>  8 ) & 0xFF )
+  #define MIX_2(x) ( uint32_t )( ( (x) >> 16 ) & 0xFF )
+  #define MIX_3(x) ( uint32_t )( ( (x) >> 24 ) & 0xFF )
+
+  #define MIX(x) {                                                  \
+    (x) = ( ( MIX_0(x) ^            MIX_2(x) ^ MIX_3(x) ) <<  0 ) | \
+          ( ( MIX_0(x)                                  ) <<  8 ) | \
+          ( (            MIX_1(x) ^ MIX_2(x)            ) << 16 ) | \
+          ( ( MIX_0(x)            ^ MIX_2(x)            ) << 24 ) ; \
+  }
+
+  MIX(t_0);
+  MIX(t_1);
+  MIX(t_2);
+  MIX(t_3);
+
+  #undef MIX
+
+  #undef MIX_0
+  #undef MIX_1
+  #undef MIX_2
+  #undef MIX_3
+
+  uint64_t r;
+
+  if     ( imm == 0 ) {
+    r = ( ( uint64_t )( ( t_0 >>  0 & 0xFF ) ) <<  0 ) |
+        ( ( uint64_t )( ( t_1 >>  0 & 0xFF ) ) <<  8 ) |
+        ( ( uint64_t )( ( t_2 >>  0 & 0xFF ) ) << 16 ) |
+        ( ( uint64_t )( ( t_3 >>  0 & 0xFF ) ) << 24 ) |
+        ( ( uint64_t )( ( t_0 >>  8 & 0xFF ) ) << 32 ) |
+        ( ( uint64_t )( ( t_1 >>  8 & 0xFF ) ) << 40 ) |
+        ( ( uint64_t )( ( t_2 >>  8 & 0xFF ) ) << 48 ) |
+        ( ( uint64_t )( ( t_3 >>  8 & 0xFF ) ) << 56 ) ;
+  }
+  else if( imm == 1 ) {
+    r = ( ( uint64_t )( ( t_0 >> 16 & 0xFF ) ) <<  0 ) |
+        ( ( uint64_t )( ( t_1 >> 16 & 0xFF ) ) <<  8 ) |
+        ( ( uint64_t )( ( t_2 >> 16 & 0xFF ) ) << 16 ) |
+        ( ( uint64_t )( ( t_3 >> 16 & 0xFF ) ) << 24 ) |
+        ( ( uint64_t )( ( t_0 >> 24 & 0xFF ) ) << 32 ) |
+        ( ( uint64_t )( ( t_1 >> 24 & 0xFF ) ) << 40 ) |
+        ( ( uint64_t )( ( t_2 >> 24 & 0xFF ) ) << 48 ) |
+        ( ( uint64_t )( ( t_3 >> 24 & 0xFF ) ) << 56 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_upd.h b/riscv/insns/romulus_rc_upd.h
new file mode 100644
index 0000000..884f968
--- /dev/null
+++ b/riscv/insns/romulus_rc_upd.h
@@ -0,0 +1,14 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+
+  uint32_t r    = LFSR_RC( x );
+
+  WRITE_REG( insn.rd(), r );  
+}
+else if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+
+  uint64_t r    = LFSR_RC( x );
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use.h b/riscv/insns/romulus_rc_use.h
new file mode 100644
index 0000000..a5ebdf9
--- /dev/null
+++ b/riscv/insns/romulus_rc_use.h
@@ -0,0 +1,10 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+
+  uint64_t t = ( ( ( x >> 0 ) & 0xF ) <<  0 ) |
+               ( ( ( x >> 4 ) & 0x3 ) << 32 ) ;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_0.h b/riscv/insns/romulus_rc_use_0.h
new file mode 100644
index 0000000..933fb62
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_0.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+
+  uint32_t t = ( x >> 0 ) & 0xF;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_1.h b/riscv/insns/romulus_rc_use_1.h
new file mode 100644
index 0000000..7cdfbc5
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_1.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+
+  uint32_t t = ( x >> 4 ) & 0x3;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rstep.h b/riscv/insns/romulus_rstep.h
new file mode 100644
index 0000000..4e01435
--- /dev/null
+++ b/riscv/insns/romulus_rstep.h
@@ -0,0 +1,62 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x1F;
+
+  uint32_t t    = ( ( uint32_t )( SBOX[ ( x >>  0 ) & 0xFF ] ) <<  0 ) |
+                  ( ( uint32_t )( SBOX[ ( x >>  8 ) & 0xFF ] ) <<  8 ) |
+                  ( ( uint32_t )( SBOX[ ( x >> 16 ) & 0xFF ] ) << 16 ) |
+                  ( ( uint32_t )( SBOX[ ( x >> 24 ) & 0xFF ] ) << 24 ) ;
+           t    = t ^ y;
+
+  uint32_t r;
+
+  if     ( imm == 0 ) {
+    r =      ( t     );
+  }
+  else if( imm == 1 ) {
+    r = ROL32( t,  8 );
+  }
+  else if( imm == 2 ) {
+    r = ROL32( t, 16 );
+  }
+  else if( imm == 3 ) {
+    r = ROL32( t, 24 );
+  }
+
+  WRITE_REG( insn.rd(), r );  
+}
+else if( xlen == 64 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x1F;
+
+  uint64_t t    = ( ( uint64_t )( SBOX[ ( x >>  0 ) & 0xFF ] ) <<  0 ) |
+                  ( ( uint64_t )( SBOX[ ( x >>  8 ) & 0xFF ] ) <<  8 ) |
+                  ( ( uint64_t )( SBOX[ ( x >> 16 ) & 0xFF ] ) << 16 ) |
+                  ( ( uint64_t )( SBOX[ ( x >> 24 ) & 0xFF ] ) << 24 ) |
+                  ( ( uint64_t )( SBOX[ ( x >> 32 ) & 0xFF ] ) << 32 ) |
+                  ( ( uint64_t )( SBOX[ ( x >> 40 ) & 0xFF ] ) << 40 ) |
+                  ( ( uint64_t )( SBOX[ ( x >> 48 ) & 0xFF ] ) << 48 ) |
+                  ( ( uint64_t )( SBOX[ ( x >> 56 ) & 0xFF ] ) << 56 ) ;
+           t    = t ^ y;
+
+  uint64_t r;
+
+  if     ( imm == 0 ) {
+    uint32_t t_0 = ( uint32_t )( t >>  0 );
+    uint32_t t_1 = ( uint32_t )( t >> 32 ); t_1 = ROL32( t_1,  8 );
+
+    r = ( ( uint64_t )( t_0 ) <<  0 ) |
+        ( ( uint64_t )( t_1 ) << 32 ) ;
+  }
+  else if( imm == 1 ) {
+    uint32_t t_0 = ( uint32_t )( t >>  0 ); t_0 = ROL32( t_0, 16 );
+    uint32_t t_1 = ( uint32_t )( t >> 32 ); t_1 = ROL32( t_1, 24 );
+
+    r = ( ( uint64_t )( t_0 ) <<  0 ) |
+        ( ( uint64_t )( t_1 ) << 32 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_tk_upd.h b/riscv/insns/romulus_tk_upd.h
new file mode 100644
index 0000000..bd7fef9
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd.h
@@ -0,0 +1,49 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x1F;
+
+  uint8_t t_0 = ( x >>  0 ) & 0xFF;
+  uint8_t t_1 = ( x >>  8 ) & 0xFF;
+  uint8_t t_2 = ( x >> 16 ) & 0xFF;
+  uint8_t t_3 = ( x >> 24 ) & 0xFF;
+  uint8_t t_4 = ( x >> 32 ) & 0xFF;
+  uint8_t t_5 = ( x >> 40 ) & 0xFF;
+  uint8_t t_6 = ( x >> 48 ) & 0xFF;
+  uint8_t t_7 = ( x >> 56 ) & 0xFF;
+
+  uint64_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint64_t )(           t_1   ) <<  0 ) |
+        ( ( uint64_t )(           t_7   ) <<  8 ) |
+        ( ( uint64_t )(           t_0   ) << 16 ) |
+        ( ( uint64_t )(           t_5   ) << 24 ) |
+        ( ( uint64_t )(           t_2   ) << 32 ) |
+        ( ( uint64_t )(           t_6   ) << 40 ) |
+        ( ( uint64_t )(           t_4   ) << 48 ) |
+        ( ( uint64_t )(           t_3   ) << 56 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint64_t )( LFSR_TK2( t_1 ) ) <<  0 ) |
+        ( ( uint64_t )( LFSR_TK2( t_7 ) ) <<  8 ) |
+        ( ( uint64_t )( LFSR_TK2( t_0 ) ) << 16 ) |
+        ( ( uint64_t )( LFSR_TK2( t_5 ) ) << 24 ) |
+        ( ( uint64_t )( LFSR_TK2( t_2 ) ) << 32 ) |
+        ( ( uint64_t )( LFSR_TK2( t_6 ) ) << 40 ) |
+        ( ( uint64_t )( LFSR_TK2( t_4 ) ) << 48 ) |
+        ( ( uint64_t )( LFSR_TK2( t_3 ) ) << 56 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint64_t )( LFSR_TK3( t_1 ) ) <<  0 ) |
+        ( ( uint64_t )( LFSR_TK3( t_7 ) ) <<  8 ) |
+        ( ( uint64_t )( LFSR_TK3( t_0 ) ) << 16 ) |
+        ( ( uint64_t )( LFSR_TK3( t_5 ) ) << 24 ) |
+        ( ( uint64_t )( LFSR_TK3( t_2 ) ) << 32 ) |
+        ( ( uint64_t )( LFSR_TK3( t_6 ) ) << 40 ) |
+        ( ( uint64_t )( LFSR_TK3( t_4 ) ) << 48 ) |
+        ( ( uint64_t )( LFSR_TK3( t_3 ) ) << 56 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/romulus_tk_upd_0.h b/riscv/insns/romulus_tk_upd_0.h
new file mode 100644
index 0000000..b5c3282
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_0.h
@@ -0,0 +1,33 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x1F;
+
+  uint8_t t_0 = ( x >>  8 ) & 0xFF;
+  uint8_t t_1 = ( y >> 24 ) & 0xFF;
+  uint8_t t_2 = ( x >>  0 ) & 0xFF;
+  uint8_t t_3 = ( y >>  8 ) & 0xFF;
+
+  uint32_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint32_t )(           t_0   ) <<  0 ) |
+        ( ( uint32_t )(           t_1   ) <<  8 ) |
+        ( ( uint32_t )(           t_2   ) << 16 ) |
+        ( ( uint32_t )(           t_3   ) << 24 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint32_t )( LFSR_TK2( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( LFSR_TK2( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( LFSR_TK2( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( LFSR_TK2( t_3 ) ) << 24 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint32_t )( LFSR_TK3( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( LFSR_TK3( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( LFSR_TK3( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( LFSR_TK3( t_3 ) ) << 24 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/romulus_tk_upd_1.h b/riscv/insns/romulus_tk_upd_1.h
new file mode 100644
index 0000000..5189cc3
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_1.h
@@ -0,0 +1,33 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x1F;
+
+  uint8_t t_0 = ( x >> 16 ) & 0xFF;
+  uint8_t t_1 = ( y >> 16 ) & 0xFF;
+  uint8_t t_2 = ( y >>  0 ) & 0xFF;
+  uint8_t t_3 = ( x >> 24 ) & 0xFF;
+
+  uint32_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint32_t )(           t_0   ) <<  0 ) |
+        ( ( uint32_t )(           t_1   ) <<  8 ) |
+        ( ( uint32_t )(           t_2   ) << 16 ) |
+        ( ( uint32_t )(           t_3   ) << 24 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint32_t )( LFSR_TK2( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( LFSR_TK2( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( LFSR_TK2( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( LFSR_TK2( t_3 ) ) << 24 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint32_t )( LFSR_TK3( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( LFSR_TK3( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( LFSR_TK3( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( LFSR_TK3( t_3 ) ) << 24 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118..fc2c7b8 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ romulus
+riscv_insn_romulus = romulus_cstep romulus_rc_upd romulus_rc_use romulus_rc_use_0 romulus_rc_use_1 romulus_rstep romulus_tk_upd romulus_tk_upd_0 romulus_tk_upd_1
+# -- romulus
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_romulus) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
