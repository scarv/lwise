diff --git a/riscv/arith.cc b/riscv/arith.cc
new file mode 100644
index 0000000..77bf363
--- /dev/null
+++ b/riscv/arith.cc
@@ -0,0 +1,4 @@
+#include "arith.h"
+
+// ++ romulus
+// -- romulus
diff --git a/riscv/arith.h b/riscv/arith.h
index 9e0c2f7..a0642f4 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -8,6 +8,189 @@
 #include <climits>
 #include <cstddef>
 
+// ++ romulus
+inline uint32_t ROL32( uint32_t x, int n ) {
+  return ( ( x << n ) | ( x >> ( 32 - n ) ) );
+}
+inline uint32_t ROR32( uint32_t x, int n ) {
+  return ( ( x >> n ) | ( x << ( 32 - n ) ) );
+}
+
+inline uint8_t SBOX_ENC( uint8_t x ) {
+  uint8_t t_0, x_0 = ( x >> 0 ) & 1;
+  uint8_t t_1, x_1 = ( x >> 1 ) & 1;
+  uint8_t t_2, x_2 = ( x >> 2 ) & 1;
+  uint8_t t_3, x_3 = ( x >> 3 ) & 1;
+  uint8_t t_4, x_4 = ( x >> 4 ) & 1;
+  uint8_t t_5, x_5 = ( x >> 5 ) & 1;
+  uint8_t t_6, x_6 = ( x >> 6 ) & 1;
+  uint8_t t_7, x_7 = ( x >> 7 ) & 1;
+
+          t_0 = x_0 ^ ~( x_2 | x_3 );
+          t_1 = x_1;
+          t_2 = x_2;
+          t_3 = x_3;
+          t_4 = x_4 ^ ~( x_6 | x_7 );
+          t_5 = x_5;
+          t_6 = x_6;
+          t_7 = x_7;
+
+  x_0 = t_5; x_1 = t_3; x_2 = t_0; x_3 = t_4; x_4 = t_6; x_5 = t_7; x_6 = t_1; x_7 = t_2;
+
+          t_0 = x_0 ^ ~( x_2 | x_3 );
+          t_1 = x_1;
+          t_2 = x_2;
+          t_3 = x_3;
+          t_4 = x_4 ^ ~( x_6 | x_7 );
+          t_5 = x_5;
+          t_6 = x_6;
+          t_7 = x_7;
+
+  x_0 = t_5; x_1 = t_3; x_2 = t_0; x_3 = t_4; x_4 = t_6; x_5 = t_7; x_6 = t_1; x_7 = t_2;
+
+          t_0 = x_0 ^ ~( x_2 | x_3 );
+          t_1 = x_1;
+          t_2 = x_2;
+          t_3 = x_3;
+          t_4 = x_4 ^ ~( x_6 | x_7 );
+          t_5 = x_5;
+          t_6 = x_6;
+          t_7 = x_7;
+
+  x_0 = t_5; x_1 = t_3; x_2 = t_0; x_3 = t_4; x_4 = t_6; x_5 = t_7; x_6 = t_1; x_7 = t_2;
+
+          t_0 = x_0 ^ ~( x_2 | x_3 );
+          t_1 = x_1;
+          t_2 = x_2;
+          t_3 = x_3;
+          t_4 = x_4 ^ ~( x_6 | x_7 );
+          t_5 = x_5;
+          t_6 = x_6;
+          t_7 = x_7;
+
+  x_0 = t_0; x_1 = t_2; x_2 = t_1; x_3 = t_3; x_4 = t_4; x_5 = t_5; x_6 = t_6; x_7 = t_7;
+
+  return ( ( x_0 & 1 ) << 0 ) | 
+         ( ( x_1 & 1 ) << 1 ) | 
+         ( ( x_2 & 1 ) << 2 ) | 
+         ( ( x_3 & 1 ) << 3 ) |
+         ( ( x_4 & 1 ) << 4 ) | 
+         ( ( x_5 & 1 ) << 5 ) | 
+         ( ( x_6 & 1 ) << 6 ) | 
+         ( ( x_7 & 1 ) << 7 ) ;
+}
+
+inline uint8_t SBOX_DEC( uint8_t x ) {
+  uint8_t t_0, x_0 = ( x >> 0 ) & 1;
+  uint8_t t_1, x_1 = ( x >> 1 ) & 1;
+  uint8_t t_2, x_2 = ( x >> 2 ) & 1;
+  uint8_t t_3, x_3 = ( x >> 3 ) & 1;
+  uint8_t t_4, x_4 = ( x >> 4 ) & 1;
+  uint8_t t_5, x_5 = ( x >> 5 ) & 1;
+  uint8_t t_6, x_6 = ( x >> 6 ) & 1;
+  uint8_t t_7, x_7 = ( x >> 7 ) & 1;
+
+  t_0 = x_0; t_1 = x_2; t_2 = x_1; t_3 = x_3; t_4 = x_4; t_5 = x_5; t_6 = x_6; t_7 = x_7;
+
+          x_0 = t_0 ^ ~( t_2 | t_3 );
+          x_1 = t_1;
+          x_2 = t_2;
+          x_3 = t_3;
+          x_4 = t_4 ^ ~( t_6 | t_7 );
+          x_5 = t_5;
+          x_6 = t_6;
+          x_7 = t_7;
+
+  t_0 = x_2; t_1 = x_6; t_2 = x_7; t_3 = x_1; t_4 = x_3; t_5 = x_0; t_6 = x_4; t_7 = x_5;
+
+          x_0 = t_0 ^ ~( t_2 | t_3 );
+          x_1 = t_1;
+          x_2 = t_2;
+          x_3 = t_3;
+          x_4 = t_4 ^ ~( t_6 | t_7 );
+          x_5 = t_5;
+          x_6 = t_6;
+          x_7 = t_7;
+
+  t_0 = x_2; t_1 = x_6; t_2 = x_7; t_3 = x_1; t_4 = x_3; t_5 = x_0; t_6 = x_4; t_7 = x_5;
+
+          x_0 = t_0 ^ ~( t_2 | t_3 );
+          x_1 = t_1;
+          x_2 = t_2;
+          x_3 = t_3;
+          x_4 = t_4 ^ ~( t_6 | t_7 );
+          x_5 = t_5;
+          x_6 = t_6;
+          x_7 = t_7;
+
+  t_0 = x_2; t_1 = x_6; t_2 = x_7; t_3 = x_1; t_4 = x_3; t_5 = x_0; t_6 = x_4; t_7 = x_5;
+
+          x_0 = t_0 ^ ~( t_2 | t_3 );
+          x_1 = t_1;
+          x_2 = t_2;
+          x_3 = t_3;
+          x_4 = t_4 ^ ~( t_6 | t_7 );
+          x_5 = t_5;
+          x_6 = t_6;
+          x_7 = t_7;
+
+  t_0 = x_2; t_1 = x_6; t_2 = x_7; t_3 = x_1; t_4 = x_3; t_5 = x_0; t_6 = x_4; t_7 = x_5;
+
+  return ( ( x_0 & 1 ) << 0 ) | 
+         ( ( x_1 & 1 ) << 1 ) | 
+         ( ( x_2 & 1 ) << 2 ) | 
+         ( ( x_3 & 1 ) << 3 ) |
+         ( ( x_4 & 1 ) << 4 ) | 
+         ( ( x_5 & 1 ) << 5 ) | 
+         ( ( x_6 & 1 ) << 6 ) | 
+         ( ( x_7 & 1 ) << 7 ) ;
+}
+
+inline uint8_t  RC_LFSR_FWD( uint8_t x ) {
+  uint8_t t = ( ( x >> 5 ) & 0x1 ) ^
+              ( ( x >> 4 ) & 0x1 ) ^
+              (              0x1 ) ;
+
+  return ( ( x << 1 ) | ( t >> 0 ) ) & 0x3F;
+}
+
+inline uint8_t  RC_LFSR_REV( uint8_t x ) {
+  uint8_t t = ( ( x >> 5 ) & 0x1 ) ^
+              ( ( x >> 0 ) & 0x1 ) ^
+              (              0x1 ) ;
+
+  return ( ( x >> 1 ) | ( t << 5 ) ) & 0x3F;
+}
+
+inline uint8_t TK2_LFSR_FWD( uint8_t x ) {
+  uint8_t t = ( ( x >> 7 ) & 0x01 ) ^
+              ( ( x >> 5 ) & 0x01 ) ;
+
+  return ( ( x << 1 ) | ( t >> 0 ) ) & 0xFF;
+}
+
+inline uint8_t TK2_LFSR_REV( uint8_t x ) {
+  uint8_t t = ( ( x >> 6 ) & 0x1 ) ^
+              ( ( x >> 0 ) & 0x1 ) ;
+
+  return ( ( x >> 1 ) | ( t << 7 ) ) & 0xFF;
+}
+
+inline uint8_t TK3_LFSR_FWD( uint8_t x ) {
+  uint8_t t = ( ( x >> 6 ) & 0x1 ) ^
+              ( ( x >> 0 ) & 0x1 ) ;
+
+  return ( ( x >> 1 ) | ( t << 7 ) ) & 0xFF;
+}
+
+inline uint8_t TK3_LFSR_REV( uint8_t x ) {
+  uint8_t t = ( ( x >> 7 ) & 0x1 ) ^
+              ( ( x >> 5 ) & 0x1 ) ;
+
+  return ( ( x << 1 ) | ( t >> 0 ) ) & 0xFF;
+}
+// -- romulus
+
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
   uint64_t t;
diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c85..ab3ddd6 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ romulus
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }  
+  // -- romulus
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b216296..5e1b7bb 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,44 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ romulus
+#define MATCH_ROMULUS_RC_UPD_ENC   0x0000600B
+#define  MASK_ROMULUS_RC_UPD_ENC   0xF000707F
+#define MATCH_ROMULUS_RC_UPD_DEC   0x8000600B
+#define  MASK_ROMULUS_RC_UPD_DEC   0xF000707F
+#define MATCH_ROMULUS_RC_USE_ENC   0x1000700B
+#define  MASK_ROMULUS_RC_USE_ENC   0xF000707F
+#define MATCH_ROMULUS_RC_USE_DEC   0x9000700B
+#define  MASK_ROMULUS_RC_USE_DEC   0xF000707F
+#define MATCH_ROMULUS_RC_USE_ENC_0 0x2000700B
+#define  MASK_ROMULUS_RC_USE_ENC_0 0xF000707F
+#define MATCH_ROMULUS_RC_USE_DEC_0 0xA000700B
+#define  MASK_ROMULUS_RC_USE_DEC_0 0xF000707F
+#define MATCH_ROMULUS_RC_USE_ENC_1 0x3000700B
+#define  MASK_ROMULUS_RC_USE_ENC_1 0xF000707F
+#define MATCH_ROMULUS_RC_USE_DEC_1 0xB000700B
+#define  MASK_ROMULUS_RC_USE_DEC_1 0xF000707F
+#define MATCH_ROMULUS_TK_UPD_ENC   0x0000602B
+#define  MASK_ROMULUS_TK_UPD_ENC   0xF000707F
+#define MATCH_ROMULUS_TK_UPD_DEC   0x8000602B
+#define  MASK_ROMULUS_TK_UPD_DEC   0xF000707F
+#define MATCH_ROMULUS_TK_UPD_ENC_0 0x1000702B
+#define  MASK_ROMULUS_TK_UPD_ENC_0 0xF000707F
+#define MATCH_ROMULUS_TK_UPD_DEC_0 0x9000702B
+#define  MASK_ROMULUS_TK_UPD_DEC_0 0xF000707F
+#define MATCH_ROMULUS_TK_UPD_ENC_1 0x2000702B
+#define  MASK_ROMULUS_TK_UPD_ENC_1 0xF000707F
+#define MATCH_ROMULUS_TK_UPD_DEC_1 0xA000702B
+#define  MASK_ROMULUS_TK_UPD_DEC_1 0xF000707F
+#define MATCH_ROMULUS_RSTEP_ENC    0x0000705B
+#define  MASK_ROMULUS_RSTEP_ENC    0xF000707F
+#define MATCH_ROMULUS_RSTEP_DEC    0x8000705B
+#define  MASK_ROMULUS_RSTEP_DEC    0xF000707F
+#define MATCH_ROMULUS_CSTEP_ENC    0x1000705B
+#define  MASK_ROMULUS_CSTEP_ENC    0xF000707F
+#define MATCH_ROMULUS_CSTEP_DEC    0x9000705B
+#define  MASK_ROMULUS_CSTEP_DEC    0xF000707F
+// -- romulus
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3130,28 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ romulus
+DECLARE_INSN(romulus_rc_upd_enc,   MATCH_ROMULUS_RC_UPD_ENC,   MASK_ROMULUS_RC_UPD_ENC)
+DECLARE_INSN(romulus_rc_upd_dec,   MATCH_ROMULUS_RC_UPD_DEC,   MASK_ROMULUS_RC_UPD_DEC)
+DECLARE_INSN(romulus_rc_use_enc,   MATCH_ROMULUS_RC_USE_ENC,   MASK_ROMULUS_RC_USE_ENC)
+DECLARE_INSN(romulus_rc_use_dec,   MATCH_ROMULUS_RC_USE_DEC,   MASK_ROMULUS_RC_USE_DEC)
+DECLARE_INSN(romulus_rc_use_enc_0, MATCH_ROMULUS_RC_USE_ENC_0, MASK_ROMULUS_RC_USE_ENC_0)
+DECLARE_INSN(romulus_rc_use_dec_0, MATCH_ROMULUS_RC_USE_DEC_0, MASK_ROMULUS_RC_USE_DEC_0)
+DECLARE_INSN(romulus_rc_use_enc_1, MATCH_ROMULUS_RC_USE_ENC_1, MASK_ROMULUS_RC_USE_ENC_1)
+DECLARE_INSN(romulus_rc_use_dec_1, MATCH_ROMULUS_RC_USE_DEC_1, MASK_ROMULUS_RC_USE_DEC_1)
+
+DECLARE_INSN(romulus_tk_upd_enc,   MATCH_ROMULUS_TK_UPD_ENC,   MASK_ROMULUS_TK_UPD_ENC)
+DECLARE_INSN(romulus_tk_upd_dec,   MATCH_ROMULUS_TK_UPD_DEC,   MASK_ROMULUS_TK_UPD_DEC)
+DECLARE_INSN(romulus_tk_upd_enc_0, MATCH_ROMULUS_TK_UPD_ENC_0, MASK_ROMULUS_TK_UPD_ENC_0)
+DECLARE_INSN(romulus_tk_upd_dec_0, MATCH_ROMULUS_TK_UPD_DEC_0, MASK_ROMULUS_TK_UPD_DEC_0)
+DECLARE_INSN(romulus_tk_upd_enc_1, MATCH_ROMULUS_TK_UPD_ENC_1, MASK_ROMULUS_TK_UPD_ENC_1)
+DECLARE_INSN(romulus_tk_upd_dec_1, MATCH_ROMULUS_TK_UPD_DEC_1, MASK_ROMULUS_TK_UPD_DEC_1)
+
+DECLARE_INSN(romulus_rstep_enc,    MATCH_ROMULUS_RSTEP_ENC,    MASK_ROMULUS_RSTEP_ENC)
+DECLARE_INSN(romulus_rstep_dec,    MATCH_ROMULUS_RSTEP_DEC,    MASK_ROMULUS_RSTEP_DEC)
+DECLARE_INSN(romulus_cstep_enc,    MATCH_ROMULUS_CSTEP_ENC,    MASK_ROMULUS_CSTEP_ENC)
+DECLARE_INSN(romulus_cstep_dec,    MATCH_ROMULUS_CSTEP_DEC,    MASK_ROMULUS_CSTEP_DEC)
+// -- romulus
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/romulus_cstep_dec.h b/riscv/insns/romulus_cstep_dec.h
new file mode 100644
index 0000000..8de505c
--- /dev/null
+++ b/riscv/insns/romulus_cstep_dec.h
@@ -0,0 +1,71 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint64_t imm  = insn.funct7() & 0x7;
+
+  uint32_t t_0  = ( ( ( x >>  0 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 32 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >>  0 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 32 ) & 0xFF ) << 24 ) ;
+  uint32_t t_1  = ( ( ( x >>  8 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 40 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >>  8 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 40 ) & 0xFF ) << 24 ) ;
+  uint32_t t_2  = ( ( ( x >> 16 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 48 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >> 16 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 48 ) & 0xFF ) << 24 ) ;
+  uint32_t t_3  = ( ( ( x >> 24 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 56 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >> 24 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 56 ) & 0xFF ) << 24 ) ;
+
+  #define MIX_0(x) ( uint32_t )( ( (x) >>  0 ) & 0xFF )
+  #define MIX_1(x) ( uint32_t )( ( (x) >>  8 ) & 0xFF )
+  #define MIX_2(x) ( uint32_t )( ( (x) >> 16 ) & 0xFF )
+  #define MIX_3(x) ( uint32_t )( ( (x) >> 24 ) & 0xFF )
+
+  #define MIX(x) {                                                  \
+    (x) = ( (            MIX_1(x)                       ) <<  0 ) | \
+          ( (            MIX_1(x) ^ MIX_2(x) ^ MIX_3(x) ) <<  8 ) | \
+          ( (            MIX_1(x)            ^ MIX_3(x) ) << 16 ) | \
+          ( ( MIX_0(x)                       ^ MIX_3(x) ) << 24 ) ; \
+  }
+
+  MIX(t_0);
+  MIX(t_1);
+  MIX(t_2);
+  MIX(t_3);
+
+  #undef MIX
+
+  #undef MIX_0
+  #undef MIX_1
+  #undef MIX_2
+  #undef MIX_3
+
+  uint64_t r;
+
+  if     ( imm == 0 ) {
+    r = ( ( uint64_t )( ( t_0 >>  0 & 0xFF ) ) <<  0 ) |
+        ( ( uint64_t )( ( t_1 >>  0 & 0xFF ) ) <<  8 ) |
+        ( ( uint64_t )( ( t_2 >>  0 & 0xFF ) ) << 16 ) |
+        ( ( uint64_t )( ( t_3 >>  0 & 0xFF ) ) << 24 ) |
+        ( ( uint64_t )( ( t_0 >>  8 & 0xFF ) ) << 32 ) |
+        ( ( uint64_t )( ( t_1 >>  8 & 0xFF ) ) << 40 ) |
+        ( ( uint64_t )( ( t_2 >>  8 & 0xFF ) ) << 48 ) |
+        ( ( uint64_t )( ( t_3 >>  8 & 0xFF ) ) << 56 ) ;
+  }
+  else if( imm == 1 ) {
+    r = ( ( uint64_t )( ( t_0 >> 16 & 0xFF ) ) <<  0 ) |
+        ( ( uint64_t )( ( t_1 >> 16 & 0xFF ) ) <<  8 ) |
+        ( ( uint64_t )( ( t_2 >> 16 & 0xFF ) ) << 16 ) |
+        ( ( uint64_t )( ( t_3 >> 16 & 0xFF ) ) << 24 ) |
+        ( ( uint64_t )( ( t_0 >> 24 & 0xFF ) ) << 32 ) |
+        ( ( uint64_t )( ( t_1 >> 24 & 0xFF ) ) << 40 ) |
+        ( ( uint64_t )( ( t_2 >> 24 & 0xFF ) ) << 48 ) |
+        ( ( uint64_t )( ( t_3 >> 24 & 0xFF ) ) << 56 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_cstep_enc.h b/riscv/insns/romulus_cstep_enc.h
new file mode 100644
index 0000000..1a0d270
--- /dev/null
+++ b/riscv/insns/romulus_cstep_enc.h
@@ -0,0 +1,71 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint64_t imm  = insn.funct7() & 0x7;
+
+  uint32_t t_0  = ( ( ( x >>  0 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 32 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >>  0 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 32 ) & 0xFF ) << 24 ) ;
+  uint32_t t_1  = ( ( ( x >>  8 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 40 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >>  8 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 40 ) & 0xFF ) << 24 ) ;
+  uint32_t t_2  = ( ( ( x >> 16 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 48 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >> 16 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 48 ) & 0xFF ) << 24 ) ;
+  uint32_t t_3  = ( ( ( x >> 24 ) & 0xFF ) <<  0 ) |
+                  ( ( ( x >> 56 ) & 0xFF ) <<  8 ) |
+                  ( ( ( y >> 24 ) & 0xFF ) << 16 ) |
+                  ( ( ( y >> 56 ) & 0xFF ) << 24 ) ;
+
+  #define MIX_0(x) ( uint32_t )( ( (x) >>  0 ) & 0xFF )
+  #define MIX_1(x) ( uint32_t )( ( (x) >>  8 ) & 0xFF )
+  #define MIX_2(x) ( uint32_t )( ( (x) >> 16 ) & 0xFF )
+  #define MIX_3(x) ( uint32_t )( ( (x) >> 24 ) & 0xFF )
+
+  #define MIX(x) {                                                  \
+    (x) = ( ( MIX_0(x) ^            MIX_2(x) ^ MIX_3(x) ) <<  0 ) | \
+          ( ( MIX_0(x)                                  ) <<  8 ) | \
+          ( (            MIX_1(x) ^ MIX_2(x)            ) << 16 ) | \
+          ( ( MIX_0(x)            ^ MIX_2(x)            ) << 24 ) ; \
+  }
+
+  MIX(t_0);
+  MIX(t_1);
+  MIX(t_2);
+  MIX(t_3);
+
+  #undef MIX
+
+  #undef MIX_0
+  #undef MIX_1
+  #undef MIX_2
+  #undef MIX_3
+
+  uint64_t r;
+
+  if     ( imm == 0 ) {
+    r = ( ( uint64_t )( ( t_0 >>  0 & 0xFF ) ) <<  0 ) |
+        ( ( uint64_t )( ( t_1 >>  0 & 0xFF ) ) <<  8 ) |
+        ( ( uint64_t )( ( t_2 >>  0 & 0xFF ) ) << 16 ) |
+        ( ( uint64_t )( ( t_3 >>  0 & 0xFF ) ) << 24 ) |
+        ( ( uint64_t )( ( t_0 >>  8 & 0xFF ) ) << 32 ) |
+        ( ( uint64_t )( ( t_1 >>  8 & 0xFF ) ) << 40 ) |
+        ( ( uint64_t )( ( t_2 >>  8 & 0xFF ) ) << 48 ) |
+        ( ( uint64_t )( ( t_3 >>  8 & 0xFF ) ) << 56 ) ;
+  }
+  else if( imm == 1 ) {
+    r = ( ( uint64_t )( ( t_0 >> 16 & 0xFF ) ) <<  0 ) |
+        ( ( uint64_t )( ( t_1 >> 16 & 0xFF ) ) <<  8 ) |
+        ( ( uint64_t )( ( t_2 >> 16 & 0xFF ) ) << 16 ) |
+        ( ( uint64_t )( ( t_3 >> 16 & 0xFF ) ) << 24 ) |
+        ( ( uint64_t )( ( t_0 >> 24 & 0xFF ) ) << 32 ) |
+        ( ( uint64_t )( ( t_1 >> 24 & 0xFF ) ) << 40 ) |
+        ( ( uint64_t )( ( t_2 >> 24 & 0xFF ) ) << 48 ) |
+        ( ( uint64_t )( ( t_3 >> 24 & 0xFF ) ) << 56 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_upd_dec.h b/riscv/insns/romulus_rc_upd_dec.h
new file mode 100644
index 0000000..f45ad31
--- /dev/null
+++ b/riscv/insns/romulus_rc_upd_dec.h
@@ -0,0 +1,14 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+
+  uint32_t r    = RC_LFSR_REV( x );
+
+  WRITE_REG( insn.rd(), r );  
+}
+else if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+
+  uint64_t r    = RC_LFSR_REV( x );
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_upd_enc.h b/riscv/insns/romulus_rc_upd_enc.h
new file mode 100644
index 0000000..0af6637
--- /dev/null
+++ b/riscv/insns/romulus_rc_upd_enc.h
@@ -0,0 +1,14 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+
+  uint32_t r    = RC_LFSR_FWD( x );
+
+  WRITE_REG( insn.rd(), r );  
+}
+else if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+
+  uint64_t r    = RC_LFSR_FWD( x );
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_dec.h b/riscv/insns/romulus_rc_use_dec.h
new file mode 100644
index 0000000..a5ebdf9
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_dec.h
@@ -0,0 +1,10 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+
+  uint64_t t = ( ( ( x >> 0 ) & 0xF ) <<  0 ) |
+               ( ( ( x >> 4 ) & 0x3 ) << 32 ) ;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_dec_0.h b/riscv/insns/romulus_rc_use_dec_0.h
new file mode 100644
index 0000000..933fb62
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_dec_0.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+
+  uint32_t t = ( x >> 0 ) & 0xF;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_dec_1.h b/riscv/insns/romulus_rc_use_dec_1.h
new file mode 100644
index 0000000..7cdfbc5
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_dec_1.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+
+  uint32_t t = ( x >> 4 ) & 0x3;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_enc.h b/riscv/insns/romulus_rc_use_enc.h
new file mode 100644
index 0000000..824a767
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_enc.h
@@ -0,0 +1,10 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+
+  uint64_t t = ( ( ( x >> 0 ) & 0xF ) <<  0 ) |
+               ( ( ( x >> 4 ) & 0x3 ) << 32 ) ;
+  uint64_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_enc_0.h b/riscv/insns/romulus_rc_use_enc_0.h
new file mode 100644
index 0000000..933fb62
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_enc_0.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+
+  uint32_t t = ( x >> 0 ) & 0xF;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rc_use_enc_1.h b/riscv/insns/romulus_rc_use_enc_1.h
new file mode 100644
index 0000000..7cdfbc5
--- /dev/null
+++ b/riscv/insns/romulus_rc_use_enc_1.h
@@ -0,0 +1,9 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+
+  uint32_t t = ( x >> 4 ) & 0x3;
+  uint32_t r = y ^ t;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rstep_dec.h b/riscv/insns/romulus_rstep_dec.h
new file mode 100644
index 0000000..3523907
--- /dev/null
+++ b/riscv/insns/romulus_rstep_dec.h
@@ -0,0 +1,75 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint32_t r    = x;
+
+  if     ( imm == 2 ) {
+    y = 2;
+  }
+  else if( imm == 3 ) {
+    y = 0;
+  }
+
+  if     ( imm == 0 ) {
+
+  }
+  else if( imm == 1 ) {
+    r = ROL32( r, 24 );
+  }
+  else if( imm == 2 ) {
+    r = ROL32( r, 16 );
+  }
+  else if( imm == 3 ) {
+    r = ROL32( r,  8 );
+  }
+
+           r    = r ^ y;
+
+           r    = ( ( uint32_t )( SBOX_DEC( ( r >>  0 ) & 0xFF ) ) <<  0 ) |
+                  ( ( uint32_t )( SBOX_DEC( ( r >>  8 ) & 0xFF ) ) <<  8 ) |
+                  ( ( uint32_t )( SBOX_DEC( ( r >> 16 ) & 0xFF ) ) << 16 ) |
+                  ( ( uint32_t )( SBOX_DEC( ( r >> 24 ) & 0xFF ) ) << 24 ) ;
+
+  WRITE_REG( insn.rd(), r );  
+}
+else if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint64_t imm  = insn.funct7() & 0x7;
+
+  uint64_t r    = x;
+
+  if     ( imm == 1 ) {
+    y = 2;
+  }
+
+  if     ( imm == 0 ) {
+    uint32_t t_0 = ( uint32_t )( r >>  0 );
+    uint32_t t_1 = ( uint32_t )( r >> 32 ); t_1 = ROL32( t_1, 24 );
+
+    r = ( ( uint64_t )( t_0 ) <<  0 ) |
+        ( ( uint64_t )( t_1 ) << 32 ) ;
+  }
+  else if( imm == 1 ) {
+    uint32_t t_0 = ( uint32_t )( r >>  0 ); t_0 = ROL32( t_0, 16 );
+    uint32_t t_1 = ( uint32_t )( r >> 32 ); t_1 = ROL32( t_1,  8 );
+
+    r = ( ( uint64_t )( t_0 ) <<  0 ) |
+        ( ( uint64_t )( t_1 ) << 32 ) ;
+  }
+
+           r    = r ^ y;
+
+           r    = ( ( uint64_t )( SBOX_DEC( ( r >>  0 ) & 0xFF ) ) <<  0 ) |
+                  ( ( uint64_t )( SBOX_DEC( ( r >>  8 ) & 0xFF ) ) <<  8 ) |
+                  ( ( uint64_t )( SBOX_DEC( ( r >> 16 ) & 0xFF ) ) << 16 ) |
+                  ( ( uint64_t )( SBOX_DEC( ( r >> 24 ) & 0xFF ) ) << 24 ) |
+                  ( ( uint64_t )( SBOX_DEC( ( r >> 32 ) & 0xFF ) ) << 32 ) |
+                  ( ( uint64_t )( SBOX_DEC( ( r >> 40 ) & 0xFF ) ) << 40 ) |
+                  ( ( uint64_t )( SBOX_DEC( ( r >> 48 ) & 0xFF ) ) << 48 ) |
+                  ( ( uint64_t )( SBOX_DEC( ( r >> 56 ) & 0xFF ) ) << 56 ) ;
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_rstep_enc.h b/riscv/insns/romulus_rstep_enc.h
new file mode 100644
index 0000000..133f99f
--- /dev/null
+++ b/riscv/insns/romulus_rstep_enc.h
@@ -0,0 +1,75 @@
+if     ( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint32_t r    = x;
+
+  if     ( imm == 2 ) {
+    y = 2;
+  }
+  else if( imm == 3 ) {
+    y = 0;
+  }
+
+           r    = ( ( uint32_t )( SBOX_ENC( ( r >>  0 ) & 0xFF ) ) <<  0 ) |
+                  ( ( uint32_t )( SBOX_ENC( ( r >>  8 ) & 0xFF ) ) <<  8 ) |
+                  ( ( uint32_t )( SBOX_ENC( ( r >> 16 ) & 0xFF ) ) << 16 ) |
+                  ( ( uint32_t )( SBOX_ENC( ( r >> 24 ) & 0xFF ) ) << 24 ) ;
+
+           r    = r ^ y;
+
+  if     ( imm == 0 ) {
+
+  }
+  else if( imm == 1 ) {
+    r = ROL32( r,  8 );
+  }
+  else if( imm == 2 ) {
+    r = ROL32( r, 16 );
+  }
+  else if( imm == 3 ) {
+    r = ROL32( r, 24 );
+  }
+
+  WRITE_REG( insn.rd(), r );  
+}
+else if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint64_t imm  = insn.funct7() & 0x7;
+
+  uint64_t r    = x;
+
+  if     ( imm == 1 ) {
+    y = 2;
+  }
+
+           r    = ( ( uint64_t )( SBOX_ENC( ( r >>  0 ) & 0xFF ) ) <<  0 ) |
+                  ( ( uint64_t )( SBOX_ENC( ( r >>  8 ) & 0xFF ) ) <<  8 ) |
+                  ( ( uint64_t )( SBOX_ENC( ( r >> 16 ) & 0xFF ) ) << 16 ) |
+                  ( ( uint64_t )( SBOX_ENC( ( r >> 24 ) & 0xFF ) ) << 24 ) |
+                  ( ( uint64_t )( SBOX_ENC( ( r >> 32 ) & 0xFF ) ) << 32 ) |
+                  ( ( uint64_t )( SBOX_ENC( ( r >> 40 ) & 0xFF ) ) << 40 ) |
+                  ( ( uint64_t )( SBOX_ENC( ( r >> 48 ) & 0xFF ) ) << 48 ) |
+                  ( ( uint64_t )( SBOX_ENC( ( r >> 56 ) & 0xFF ) ) << 56 ) ;
+         
+           r    = r ^ y;
+
+  if     ( imm == 0 ) {
+    uint32_t t_0 = ( uint32_t )( r >>  0 );
+    uint32_t t_1 = ( uint32_t )( r >> 32 ); t_1 = ROL32( t_1,  8 );
+
+    r = ( ( uint64_t )( t_0 ) <<  0 ) |
+        ( ( uint64_t )( t_1 ) << 32 ) ;
+  }
+  else if( imm == 1 ) {
+    uint32_t t_0 = ( uint32_t )( r >>  0 ); t_0 = ROL32( t_0, 16 );
+    uint32_t t_1 = ( uint32_t )( r >> 32 ); t_1 = ROL32( t_1, 24 );
+
+    r = ( ( uint64_t )( t_0 ) <<  0 ) |
+        ( ( uint64_t )( t_1 ) << 32 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );  
+}
diff --git a/riscv/insns/romulus_tk_upd_dec.h b/riscv/insns/romulus_tk_upd_dec.h
new file mode 100644
index 0000000..c63a18d
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_dec.h
@@ -0,0 +1,49 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint8_t t_0 = ( x >>  0 ) & 0xFF;
+  uint8_t t_1 = ( x >>  8 ) & 0xFF;
+  uint8_t t_2 = ( x >> 16 ) & 0xFF;
+  uint8_t t_3 = ( x >> 24 ) & 0xFF;
+  uint8_t t_4 = ( x >> 32 ) & 0xFF;
+  uint8_t t_5 = ( x >> 40 ) & 0xFF;
+  uint8_t t_6 = ( x >> 48 ) & 0xFF;
+  uint8_t t_7 = ( x >> 56 ) & 0xFF;
+
+  uint64_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint64_t )(               t_2   ) <<  0 ) |
+        ( ( uint64_t )(               t_0   ) <<  8 ) |
+        ( ( uint64_t )(               t_4   ) << 16 ) |
+        ( ( uint64_t )(               t_7   ) << 24 ) |
+        ( ( uint64_t )(               t_6   ) << 32 ) |
+        ( ( uint64_t )(               t_3   ) << 40 ) |
+        ( ( uint64_t )(               t_5   ) << 48 ) |
+        ( ( uint64_t )(               t_1   ) << 56 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint64_t )( TK2_LFSR_REV( t_2 ) ) <<  0 ) |
+        ( ( uint64_t )( TK2_LFSR_REV( t_0 ) ) <<  8 ) |
+        ( ( uint64_t )( TK2_LFSR_REV( t_4 ) ) << 16 ) |
+        ( ( uint64_t )( TK2_LFSR_REV( t_7 ) ) << 24 ) |
+        ( ( uint64_t )( TK2_LFSR_REV( t_6 ) ) << 32 ) |
+        ( ( uint64_t )( TK2_LFSR_REV( t_3 ) ) << 40 ) |
+        ( ( uint64_t )( TK2_LFSR_REV( t_5 ) ) << 48 ) |
+        ( ( uint64_t )( TK2_LFSR_REV( t_1 ) ) << 56 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint64_t )( TK3_LFSR_REV( t_2 ) ) <<  0 ) |
+        ( ( uint64_t )( TK3_LFSR_REV( t_0 ) ) <<  8 ) |
+        ( ( uint64_t )( TK3_LFSR_REV( t_4 ) ) << 16 ) |
+        ( ( uint64_t )( TK3_LFSR_REV( t_7 ) ) << 24 ) |
+        ( ( uint64_t )( TK3_LFSR_REV( t_6 ) ) << 32 ) |
+        ( ( uint64_t )( TK3_LFSR_REV( t_3 ) ) << 40 ) |
+        ( ( uint64_t )( TK3_LFSR_REV( t_5 ) ) << 48 ) |
+        ( ( uint64_t )( TK3_LFSR_REV( t_1 ) ) << 56 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/romulus_tk_upd_dec_0.h b/riscv/insns/romulus_tk_upd_dec_0.h
new file mode 100644
index 0000000..84b8cf2
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_dec_0.h
@@ -0,0 +1,33 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint8_t t_0 = ( x >> 16 ) & 0xFF;
+  uint8_t t_1 = ( x >>  0 ) & 0xFF;
+  uint8_t t_2 = ( y >>  0 ) & 0xFF;
+  uint8_t t_3 = ( y >> 24 ) & 0xFF;
+
+  uint32_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint32_t )(               t_0   ) <<  0 ) |
+        ( ( uint32_t )(               t_1   ) <<  8 ) |
+        ( ( uint32_t )(               t_2   ) << 16 ) |
+        ( ( uint32_t )(               t_3   ) << 24 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint32_t )( TK2_LFSR_REV( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK2_LFSR_REV( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK2_LFSR_REV( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK2_LFSR_REV( t_3 ) ) << 24 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint32_t )( TK3_LFSR_REV( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK3_LFSR_REV( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK3_LFSR_REV( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK3_LFSR_REV( t_3 ) ) << 24 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/romulus_tk_upd_dec_1.h b/riscv/insns/romulus_tk_upd_dec_1.h
new file mode 100644
index 0000000..5d88702
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_dec_1.h
@@ -0,0 +1,33 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint8_t t_0 = ( y >> 16 ) & 0xFF;
+  uint8_t t_1 = ( x >> 24 ) & 0xFF;
+  uint8_t t_2 = ( y >>  8 ) & 0xFF;
+  uint8_t t_3 = ( x >>  8 ) & 0xFF;
+
+  uint32_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint32_t )(               t_0   ) <<  0 ) |
+        ( ( uint32_t )(               t_1   ) <<  8 ) |
+        ( ( uint32_t )(               t_2   ) << 16 ) |
+        ( ( uint32_t )(               t_3   ) << 24 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint32_t )( TK2_LFSR_REV( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK2_LFSR_REV( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK2_LFSR_REV( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK2_LFSR_REV( t_3 ) ) << 24 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint32_t )( TK3_LFSR_REV( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK3_LFSR_REV( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK3_LFSR_REV( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK3_LFSR_REV( t_3 ) ) << 24 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/romulus_tk_upd_enc.h b/riscv/insns/romulus_tk_upd_enc.h
new file mode 100644
index 0000000..5a9bc11
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_enc.h
@@ -0,0 +1,49 @@
+if( xlen == 64 ) {
+  uint64_t x    = READ_REG( insn.rs1() );
+  uint64_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint8_t t_0 = ( x >>  0 ) & 0xFF;
+  uint8_t t_1 = ( x >>  8 ) & 0xFF;
+  uint8_t t_2 = ( x >> 16 ) & 0xFF;
+  uint8_t t_3 = ( x >> 24 ) & 0xFF;
+  uint8_t t_4 = ( x >> 32 ) & 0xFF;
+  uint8_t t_5 = ( x >> 40 ) & 0xFF;
+  uint8_t t_6 = ( x >> 48 ) & 0xFF;
+  uint8_t t_7 = ( x >> 56 ) & 0xFF;
+
+  uint64_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint64_t )(               t_1   ) <<  0 ) |
+        ( ( uint64_t )(               t_7   ) <<  8 ) |
+        ( ( uint64_t )(               t_0   ) << 16 ) |
+        ( ( uint64_t )(               t_5   ) << 24 ) |
+        ( ( uint64_t )(               t_2   ) << 32 ) |
+        ( ( uint64_t )(               t_6   ) << 40 ) |
+        ( ( uint64_t )(               t_4   ) << 48 ) |
+        ( ( uint64_t )(               t_3   ) << 56 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint64_t )( TK2_LFSR_FWD( t_1 ) ) <<  0 ) |
+        ( ( uint64_t )( TK2_LFSR_FWD( t_7 ) ) <<  8 ) |
+        ( ( uint64_t )( TK2_LFSR_FWD( t_0 ) ) << 16 ) |
+        ( ( uint64_t )( TK2_LFSR_FWD( t_5 ) ) << 24 ) |
+        ( ( uint64_t )( TK2_LFSR_FWD( t_2 ) ) << 32 ) |
+        ( ( uint64_t )( TK2_LFSR_FWD( t_6 ) ) << 40 ) |
+        ( ( uint64_t )( TK2_LFSR_FWD( t_4 ) ) << 48 ) |
+        ( ( uint64_t )( TK2_LFSR_FWD( t_3 ) ) << 56 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint64_t )( TK3_LFSR_FWD( t_1 ) ) <<  0 ) |
+        ( ( uint64_t )( TK3_LFSR_FWD( t_7 ) ) <<  8 ) |
+        ( ( uint64_t )( TK3_LFSR_FWD( t_0 ) ) << 16 ) |
+        ( ( uint64_t )( TK3_LFSR_FWD( t_5 ) ) << 24 ) |
+        ( ( uint64_t )( TK3_LFSR_FWD( t_2 ) ) << 32 ) |
+        ( ( uint64_t )( TK3_LFSR_FWD( t_6 ) ) << 40 ) |
+        ( ( uint64_t )( TK3_LFSR_FWD( t_4 ) ) << 48 ) |
+        ( ( uint64_t )( TK3_LFSR_FWD( t_3 ) ) << 56 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/romulus_tk_upd_enc_0.h b/riscv/insns/romulus_tk_upd_enc_0.h
new file mode 100644
index 0000000..f3943e4
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_enc_0.h
@@ -0,0 +1,33 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint8_t t_0 = ( x >>  8 ) & 0xFF;
+  uint8_t t_1 = ( y >> 24 ) & 0xFF;
+  uint8_t t_2 = ( x >>  0 ) & 0xFF;
+  uint8_t t_3 = ( y >>  8 ) & 0xFF;
+
+  uint32_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint32_t )(               t_0   ) <<  0 ) |
+        ( ( uint32_t )(               t_1   ) <<  8 ) |
+        ( ( uint32_t )(               t_2   ) << 16 ) |
+        ( ( uint32_t )(               t_3   ) << 24 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint32_t )( TK2_LFSR_FWD( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK2_LFSR_FWD( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK2_LFSR_FWD( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK2_LFSR_FWD( t_3 ) ) << 24 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint32_t )( TK3_LFSR_FWD( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK3_LFSR_FWD( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK3_LFSR_FWD( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK3_LFSR_FWD( t_3 ) ) << 24 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/insns/romulus_tk_upd_enc_1.h b/riscv/insns/romulus_tk_upd_enc_1.h
new file mode 100644
index 0000000..489d104
--- /dev/null
+++ b/riscv/insns/romulus_tk_upd_enc_1.h
@@ -0,0 +1,33 @@
+if( xlen == 32 ) {
+  uint32_t x    = READ_REG( insn.rs1() );
+  uint32_t y    = READ_REG( insn.rs2() );
+  uint32_t imm  = insn.funct7() & 0x7;
+
+  uint8_t t_0 = ( x >> 16 ) & 0xFF;
+  uint8_t t_1 = ( y >> 16 ) & 0xFF;
+  uint8_t t_2 = ( y >>  0 ) & 0xFF;
+  uint8_t t_3 = ( x >> 24 ) & 0xFF;
+
+  uint32_t r;
+
+  if     ( imm == 1 ) {
+    r = ( ( uint32_t )(               t_0   ) <<  0 ) |
+        ( ( uint32_t )(               t_1   ) <<  8 ) |
+        ( ( uint32_t )(               t_2   ) << 16 ) |
+        ( ( uint32_t )(               t_3   ) << 24 ) ;
+  }
+  else if( imm == 2 ) {
+    r = ( ( uint32_t )( TK2_LFSR_FWD( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK2_LFSR_FWD( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK2_LFSR_FWD( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK2_LFSR_FWD( t_3 ) ) << 24 ) ;
+  }
+  else if( imm == 3 ) {
+    r = ( ( uint32_t )( TK3_LFSR_FWD( t_0 ) ) <<  0 ) |
+        ( ( uint32_t )( TK3_LFSR_FWD( t_1 ) ) <<  8 ) |
+        ( ( uint32_t )( TK3_LFSR_FWD( t_2 ) ) << 16 ) |
+        ( ( uint32_t )( TK3_LFSR_FWD( t_3 ) ) << 24 ) ;
+  }
+
+  WRITE_REG( insn.rd(), r );
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118..69e567b 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -39,6 +39,7 @@ riscv_precompiled_hdrs = \
 	insn_template.h \
 
 riscv_srcs = \
+	arith.cc \
 	processor.cc \
 	execute.cc \
 	dts.cc \
@@ -1273,6 +1274,10 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ romulus
+riscv_insn_romulus = romulus_cstep_dec romulus_cstep_enc romulus_rc_upd_dec romulus_rc_upd_enc romulus_rc_use_dec romulus_rc_use_dec_0 romulus_rc_use_dec_1 romulus_rc_use_enc romulus_rc_use_enc_0 romulus_rc_use_enc_1 romulus_rstep_dec romulus_rstep_enc romulus_tk_upd_dec romulus_tk_upd_dec_0 romulus_tk_upd_dec_1 romulus_tk_upd_enc romulus_tk_upd_enc_0 romulus_tk_upd_enc_1
+# -- romulus
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1294,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_romulus) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
