# Copyright (C) 2021 SCARV project <info@scarv.org>
#
# Use of this source code is restricted per the MIT license, a copy of which 
# can be found at https://opensource.org/licenses/MIT (or should be included 
# as LICENSE.txt within the associated archive or repository).

export LD_LIBRARY_PATH = $(RISCV_ROCKET)/lib
export FPGA_BUILD      = $(REPO_HOME)/build/fpga
export FPGA            = $(REPO_HOME)/src/hardware/fpga
export BOARD          ?= sakura-x
export SOC	           = $(IMP)-rocket

VIVADO_PROJECT = $(SOC)-$(ISE)-imp
prog_mem       = $(FPGA_BUILD)/$(VIVADO_PROJECT)/prog-bin/prog.mem

VIVADO = cd $(FPGA_BUILD)/$(VIVADO_PROJECT) && vivado
UPDMEM = cd $(FPGA_BUILD)/$(VIVADO_PROJECT) && updatemem

#--------------------------------------------------------------------
# ISE Implementation
#--------------------------------------------------------------------
include ${REPO_HOME}/src/hardware/rtl/$(IMP)/Makefile.in

#--------------------------------------------------------------------
# Systems
#--------------------------------------------------------------------
include $(FPGA)/board/$(BOARD)/script/bsp
include $(FPGA)/soc/$(SOC)/Makefile.in

#--------------------------------------------------------------------
# Sources
#--------------------------------------------------------------------
rocketchip_support_src = \
    $(ROCKETCHIP_REPO)/src/main/resources/vsrc/plusarg_reader.v \
    $(ROCKETCHIP_REPO)/src/main/resources/vsrc/EICG_wrapper.v

rocketchip_cop_ram_src =\
    $(ROCKETCHIP_REPO)/vsim/generated-src/$(ROCKET).$(COP_FPGACONFIG).behav_srams.v

rocketchip_xalu_ram_src =\
    $(ROCKETCHIP_REPO)/vsim/generated-src/$(ROCKET).$(XALU_FPGACONFIG).behav_srams.v

rtl_sources = $(widecard $(FPGA_BUILD)/$(VIVADO_PROJECT)/rtl_sources/*.v)

#--------------------------------------------------------------------
# Gathering Verilogs for FPGA Project
#--------------------------------------------------------------------
fpga_verilog: $(ISE)_verilog

.PHONY: fpga_verilog

#--------------------------------------------------------------------
# Project generation
#--------------------------------------------------------------------
vivado_project_file = $(FPGA_BUILD)/$(VIVADO_PROJECT)/$(VIVADO_PROJECT).xpr
fpga_project: fpga_verilog | $(vivado_project_file)
$(vivado_project_file): 
	$(shell sed -i 's/CONFIG.PRIM_SOURCE.*/''CONFIG.PRIM_SOURCE {$(clktype)} \\''/g' $(FPGA)/soc/$(SOC)/script/make_project.tcl)
	$(shell sed -i 's/CONFIG.PRIM_IN_FREQ.*/''CONFIG.PRIM_IN_FREQ {$(inclock)} \\''/g' $(FPGA)/soc/$(SOC)/script/make_project.tcl)
	$(shell sed -i 's/set_property verilog_define.*/''set_property verilog_define \[list FPGA $(clktype)\] \[get_filesets sources_1\] ''/g' $(FPGA)/soc/$(SOC)/script/make_project.tcl)
	$(VIVADO) -mode batch -source $(FPGA)/soc/$(SOC)/script/make_project.tcl -tclargs $(VIVADO_PROJECT) $(FPGA) $(FPGA_BUILD) $(BOARD) $(part)  

bitstream = $(FPGA_BUILD)/$(VIVADO_PROJECT)/$(VIVADO_PROJECT).runs/impl_1/system_top_wrapper.bit
bitstream: $(bitstream) 
$(bitstream): $(rtl_sources)  $(vivado_project_file)
	$(VIVADO) -mode batch -source $(FPGA)/script/make_bitstream.tcl -tclargs $(VIVADO_PROJECT) $(FPGA_BUILD)

program: $(bitstream)
	$(VIVADO) -mode batch -source $(FPGA)/script/program.tcl -tclargs $(device) $(bitstream)

vivado: $(vivado_project_file)
	$(VIVADO) $(vivado_project_file) &

.PHONY: fpga_project bitstream program vivado 

#--------------------------------------------------------------------
# Update Program helper
#--------------------------------------------------------------------
bit-update: $(FPGA_BUILD)/$(VIVADO_PROJECT)/$(VIVADO_PROJECT).runs/impl_1/system_top_wrapper.new.bit
$(FPGA_BUILD)/$(VIVADO_PROJECT)/$(VIVADO_PROJECT).runs/impl_1/system_top_wrapper.new.bit: $(bitstream) $(prog_mem) $(FPGA_BUILD)/$(VIVADO_PROJECT)/prog.mmi
	$(UPDMEM) -force -meminfo $(FPGA_BUILD)/$(VIVADO_PROJECT)/prog.mmi -data $(prog_mem) -bit $(bitstream) -proc dummy -out $@

program-updated: $(FPGA_BUILD)/$(VIVADO_PROJECT)/$(VIVADO_PROJECT).runs/impl_1/system_top_wrapper.new.bit
	$(VIVADO) -mode batch -source $(FPGA)/script/program.tcl -tclargs $(device) $(FPGA_BUILD)/$(VIVADO_PROJECT)/$(VIVADO_PROJECT).runs/impl_1/system_top_wrapper.new.bit

.PHONY: bit-update program-updated

#--------------------------------------------------------------------
# compiling programs to run on FPGA
#--------------------------------------------------------------------
helloworld:
	$(MAKE) -C $(FPGA)/examples/helloworld all CORE=$(SOC) hal_dir=$(FPGA)/soc/$(SOC)/hal work_dir=$(FPGA_BUILD)/helloworld
	{ echo '@00000000'; cat $(FPGA_BUILD)/helloworld/helloworld-$(SOC).hex;} >$(prog_mem)
led-flash:
	$(MAKE) -C $(REPO_HOME)/csrc/led_flash all CORE=$(SOC) hal_dir=$(FPGA)/soc/$(SOC)/hal work_dir=$(FPGA_BUILD)/led_flash
	{ echo '@00000000'; cat $(FPGA_BUILD)/led_flash/led_flash-$(SOC).hex;} >$(prog_mem)

run_verify:
	$(MAKE) -C $(REPO_HOME)/csrc/run_verify all CORE=$(SOC) hal_dir=$(FPGA)/soc/$(SOC)/hal work_dir=$(FPGA_BUILD)/run_verify
	{ echo '@00000000'; cat $(FPGA_BUILD)/run_verify/run_verify-$(SOC).hex;} >$(prog_mem)

run_eval:
	$(MAKE) -C $(REPO_HOME)/csrc/run_eval all CORE=$(SOC) hal_dir=$(FPGA)/soc/$(SOC)/hal work_dir=$(FPGA_BUILD)/run_eval
	{ echo '@00000000'; cat $(FPGA_BUILD)/run_eval/run_eval-$(SOC).hex;} >$(prog_mem)

run32_eval:
	$(MAKE) -C $(REPO_HOME)/csrc/run32_eval all CORE=$(SOC) hal_dir=$(FPGA)/soc/$(SOC)/hal work_dir=$(FPGA_BUILD)/run32_eval
	{ echo '@00000000'; cat $(FPGA_BUILD)/run32_eval/run32_eval-$(SOC).hex;} >$(prog_mem)

.PHONY: helloworld led-flash 


